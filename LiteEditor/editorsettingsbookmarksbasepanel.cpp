//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "editorsettingsbookmarksbasepanel.h"


// Declare the bitmap loading function
extern void wxCrafterZg1KYTInitBitmapResources();

static bool bBitmapLoaded = false;


EditorSettingsBookmarksBasePanel::EditorSettingsBookmarksBasePanel(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterZg1KYTInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer2 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer2);
    
    m_displaySelection = new wxCheckBox(this, wxID_ANY, _("Display Breakpoints / Bookmarks margin"), wxDefaultPosition, wxSize(-1, -1), 0);
    m_displaySelection->SetValue(true);
    
    bSizer2->Add(m_displaySelection, 0, wxALL, 5);
    
    m_staticText3 = new wxStaticText(this, wxID_ANY, _("Bookmark Shape:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    bSizer2->Add(m_staticText3, 0, wxALL, 5);
    
    wxArrayString m_bookMarkShapeArr;
    m_bookMarkShape = new wxChoice(this, wxID_ANY, wxDefaultPosition, wxSize(-1, -1), m_bookMarkShapeArr, 0);
    
    bSizer2->Add(m_bookMarkShape, 0, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* fgSizer1 = new wxFlexGridSizer(  0, 2, 0, 0);
    fgSizer1->SetFlexibleDirection( wxBOTH );
    fgSizer1->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    fgSizer1->AddGrowableCol(0);
    fgSizer1->AddGrowableCol(1);
    
    bSizer2->Add(fgSizer1, 0, wxALL|wxEXPAND, 5);
    
    m_staticText4 = new wxStaticText(this, wxID_ANY, _("Select the bookmark background colour:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText4, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_backgroundColor = new wxColourPickerCtrl(this, wxID_ANY, *wxBLACK, wxDefaultPosition, wxSize(-1, -1), wxCLRP_DEFAULT_STYLE);
    
    fgSizer1->Add(m_backgroundColor, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, 5);
    
    m_staticText5 = new wxStaticText(this, wxID_ANY, _("Select the bookmark foreground colour:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText5, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_foregroundColor = new wxColourPickerCtrl(this, wxID_ANY, *wxBLACK, wxDefaultPosition, wxSize(-1, -1), wxCLRP_DEFAULT_STYLE);
    
    fgSizer1->Add(m_foregroundColor, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, 5);
    
    m_staticText66 = new wxStaticText(this, wxID_ANY, _("Select 'Highlight Matching Word' colour:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText66, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_highlightColor = new wxColourPickerCtrl(this, wxID_ANY, *wxBLACK, wxDefaultPosition, wxSize(-1, -1), wxCLRP_DEFAULT_STYLE);
    m_highlightColor->SetToolTip(_("This lets you set the 'Highlight Matching Word' colour. To se the colour of the selection itself, see 'Settings > Syntax Highlight and Fonts'."));
    
    fgSizer1->Add(m_highlightColor, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, 5);
    
    m_staticText54 = new wxStaticText(this, wxID_ANY, _("'Highlight Matching Word' alpha:"), wxDefaultPosition, wxSize(-1, -1), 0);
    
    fgSizer1->Add(m_staticText54, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    m_spinCtrlHighlightAlpha = new wxSpinCtrl(this, wxID_ANY, wxT("128"), wxDefaultPosition, wxSize(-1,-1), wxSP_ARROW_KEYS);
    m_spinCtrlHighlightAlpha->SetToolTip(_("Choose a colour between 0 and 256. Higher values give a less-transparent background"));
    m_spinCtrlHighlightAlpha->SetRange(0, 255);
    
    fgSizer1->Add(m_spinCtrlHighlightAlpha, 0, wxALL|wxEXPAND|wxALIGN_RIGHT, 5);
    
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
}

EditorSettingsBookmarksBasePanel::~EditorSettingsBookmarksBasePanel()
{
}
