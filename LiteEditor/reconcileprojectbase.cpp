//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "reconcileprojectbase.h"


// Declare the bitmap loading function
extern void wxCrafterjdrz3kInitBitmapResources();

static bool bBitmapLoaded = false;


ReconcileProjectDlgBaseClass::ReconcileProjectDlgBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterjdrz3kInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer83 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer83);
    
    m_treebook84 = new wxTreebook(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxBK_LEFT|wxBK_DEFAULT);
    
    boxSizer83->Add(m_treebook84, 1, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer85 = new wxStdDialogButtonSizer();
    
    boxSizer83->Add(m_stdBtnSizer85, 0, wxALL|wxEXPAND, 5);
    
    m_buttonDone = new wxButton(this, wxID_OK, _(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonDone->SetDefault();
    m_stdBtnSizer85->AddButton(m_buttonDone);
    m_stdBtnSizer85->Realize();
    
    
    SetSizeHints(500,300);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
}

ReconcileProjectDlgBaseClass::~ReconcileProjectDlgBaseClass()
{
}

ReconcileProjectPanelBaseClass::ReconcileProjectPanelBaseClass(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
    : wxPanel(parent, id, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterjdrz3kInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer84 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer84);
    
    m_notebook88 = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxBK_DEFAULT);
    
    boxSizer84->Add(m_notebook88, 1, wxALL|wxEXPAND, 5);
    
    m_panel89 = new wxPanel(m_notebook88, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook88->AddPage(m_panel89, _("Additional files"), false);
    
    wxBoxSizer* boxSizer90 = new wxBoxSizer(wxVERTICAL);
    m_panel89->SetSizer(boxSizer90);
    
    wxArrayString m_checkListBoxMissingArr;
    m_checkListBoxMissing = new wxCheckListBox(m_panel89, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_checkListBoxMissingArr, wxLB_SINGLE);
    m_checkListBoxMissing->SetToolTip(_("These files exist on the filesystem but are missing from the project. Select any that you wish to add."));
    
    boxSizer90->Add(m_checkListBoxMissing, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer163 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer90->Add(boxSizer163, 0, wxALIGN_CENTER_HORIZONTAL, 0);
    
    m_radioShowAll = new wxRadioButton(m_panel89, wxID_ANY, _("Show all new files"), wxDefaultPosition, wxSize(-1,-1), wxRB_GROUP);
    m_radioShowAll->SetValue(1);
    
    boxSizer163->Add(m_radioShowAll, 0, wxLEFT|wxRIGHT, 5);
    
    m_radioOnlyUnallocd = new wxRadioButton(m_panel89, wxID_ANY, _("Show only unallocated files"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_radioOnlyUnallocd->SetValue(1);
    
    boxSizer163->Add(m_radioOnlyUnallocd, 0, wxLEFT, 5);
    
    m_checkBoxShowAllVDs = new wxCheckBox(m_panel89, wxID_ANY, _("Show all virtual directories"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_checkBoxShowAllVDs->SetValue(false);
    m_checkBoxShowAllVDs->SetToolTip(_("Normally only virtual directories containing new files (or whose parents do) are shown. If ticked, show them all."));
    
    boxSizer90->Add(m_checkBoxShowAllVDs, 0, wxLEFT|wxTOP, 5);
    
    wxBoxSizer* boxSizer89 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer90->Add(boxSizer89, 0, wxEXPAND|wxALIGN_TOP, 0);
    
    m_buttonProcessSelectedFiles = new wxButton(m_panel89, wxID_ANY, _("Add selected files"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_buttonProcessSelectedFiles->SetDefault();
    
    boxSizer89->Add(m_buttonProcessSelectedFiles, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer90 = new wxFlexGridSizer(  0, 1, 0, 0);
    flexGridSizer90->SetFlexibleDirection( wxBOTH );
    flexGridSizer90->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer89->Add(flexGridSizer90, 0, wxALL|wxEXPAND, 5);
    
    m_button91 = new wxButton(m_panel89, wxID_ANY, _("Select all"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer90->Add(m_button91, 0, wxALL, 5);
    
    m_button92 = new wxButton(m_panel89, wxID_ANY, _("Unselect all"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer90->Add(m_button92, 0, wxALL, 5);
    
    m_panelStale = new wxPanel(m_notebook88, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxTAB_TRAVERSAL);
    m_notebook88->AddPage(m_panelStale, _("Stale files"), false);
    
    wxBoxSizer* boxSizer909 = new wxBoxSizer(wxVERTICAL);
    m_panelStale->SetSizer(boxSizer909);
    
    wxArrayString m_checkListBoxStaleArr;
    m_checkListBoxStale = new wxCheckListBox(m_panelStale, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_checkListBoxStaleArr, wxLB_SINGLE);
    m_checkListBoxStale->SetToolTip(_("These files no longer exist on the filesystem. Select all those to remove from the project."));
    
    boxSizer909->Add(m_checkListBoxStale, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer8911 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer909->Add(boxSizer8911, 0, wxEXPAND, 0);
    
    m_button9312 = new wxButton(m_panelStale, wxID_ANY, _("Remove selected files"), wxDefaultPosition, wxSize(-1,-1), 0);
    m_button9312->SetDefault();
    
    boxSizer8911->Add(m_button9312, 1, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    wxFlexGridSizer* flexGridSizer9014 = new wxFlexGridSizer(  0, 1, 0, 0);
    flexGridSizer9014->SetFlexibleDirection( wxBOTH );
    flexGridSizer9014->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer8911->Add(flexGridSizer9014, 0, wxALL|wxEXPAND, 5);
    
    m_button9115 = new wxButton(m_panelStale, wxID_ANY, _("Select all"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer9014->Add(m_button9115, 0, wxALL, 5);
    
    m_button9216 = new wxButton(m_panelStale, wxID_ANY, _("Unselect all"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer9014->Add(m_button9216, 0, wxALL, 5);
    
    
    SetSizeHints(500,300);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_radioShowAll->Connect(wxEVT_COMMAND_RADIOBUTTON_SELECTED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnShowAllInRoot), NULL, this);
    m_radioOnlyUnallocd->Connect(wxEVT_COMMAND_RADIOBUTTON_SELECTED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnShowUnallocdInRoot), NULL, this);
    m_checkBoxShowAllVDs->Connect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnShowVDsClicked), NULL, this);
    m_buttonProcessSelectedFiles->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnProcessButtonClicked), NULL, this);
    m_buttonProcessSelectedFiles->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnProcessButtonUpdateUI), NULL, this);
    m_button91->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnSelectAll), NULL, this);
    m_button91->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnSelectAllUpdateUI), NULL, this);
    m_button92->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAll), NULL, this);
    m_button92->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAllUpdateUI), NULL, this);
    m_button9312->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnRemoveStaleButtonClicked), NULL, this);
    m_button9312->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnProcessButtonUpdateUI), NULL, this);
    m_button9115->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnSelectAll), NULL, this);
    m_button9115->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnSelectAllUpdateUI), NULL, this);
    m_button9216->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAll), NULL, this);
    m_button9216->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAllUpdateUI), NULL, this);
    
}

ReconcileProjectPanelBaseClass::~ReconcileProjectPanelBaseClass()
{
    m_radioShowAll->Disconnect(wxEVT_COMMAND_RADIOBUTTON_SELECTED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnShowAllInRoot), NULL, this);
    m_radioOnlyUnallocd->Disconnect(wxEVT_COMMAND_RADIOBUTTON_SELECTED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnShowUnallocdInRoot), NULL, this);
    m_checkBoxShowAllVDs->Disconnect(wxEVT_COMMAND_CHECKBOX_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnShowVDsClicked), NULL, this);
    m_buttonProcessSelectedFiles->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnProcessButtonClicked), NULL, this);
    m_buttonProcessSelectedFiles->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnProcessButtonUpdateUI), NULL, this);
    m_button91->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnSelectAll), NULL, this);
    m_button91->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnSelectAllUpdateUI), NULL, this);
    m_button92->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAll), NULL, this);
    m_button92->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAllUpdateUI), NULL, this);
    m_button9312->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnRemoveStaleButtonClicked), NULL, this);
    m_button9312->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnProcessButtonUpdateUI), NULL, this);
    m_button9115->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnSelectAll), NULL, this);
    m_button9115->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnSelectAllUpdateUI), NULL, this);
    m_button9216->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAll), NULL, this);
    m_button9216->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectPanelBaseClass::OnUnselectAllUpdateUI), NULL, this);
    
}

ReconcileProjectFiletypesDlgBaseClass::ReconcileProjectFiletypesDlgBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterjdrz3kInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer114 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer114);
    
    wxBoxSizer* boxSizer160 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer114->Add(boxSizer160, 0, wxALL|wxEXPAND, 5);
    
    m_staticText116 = new wxStaticText(this, wxID_ANY, _("Look for files starting with this directory:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer160->Add(m_staticText116, 0, wxALL, 5);
    
    m_dirPickerToplevel = new wxDirPickerCtrl(this, wxID_ANY, wxEmptyString, wxT("Select a folder"), wxDefaultPosition, wxSize(-1,-1), wxDIRP_DEFAULT_STYLE|wxDIRP_USE_TEXTCTRL|wxDIRP_DIR_MUST_EXIST);
    
    boxSizer160->Add(m_dirPickerToplevel, 0, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer16016 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer114->Add(boxSizer16016, 0, wxALL|wxEXPAND, 5);
    
    m_staticText11617 = new wxStaticText(this, wxID_ANY, _("Extensions to consider when looking for missing files:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer16016->Add(m_staticText11617, 0, wxALL, 5);
    
    m_textExtensions = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), 0);
    m_textExtensions->SetToolTip(_("A semi-colon separated list of extensions e.g. cpp;h;xrc\nIf you really want to find all possible files, just add *"));
    
    boxSizer16016->Add(m_textExtensions, 0, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* flexGridSizer11517 = new wxFlexGridSizer(  2, 2, 0, 0);
    flexGridSizer11517->SetFlexibleDirection( wxBOTH );
    flexGridSizer11517->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer11517->AddGrowableCol(0);
    flexGridSizer11517->AddGrowableRow(1);
    
    boxSizer114->Add(flexGridSizer11517, 1, wxALL|wxEXPAND, 5);
    
    m_staticText11618 = new wxStaticText(this, wxID_ANY, _("Paths to ignore:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer11517->Add(m_staticText11618, 0, wxALL, 5);
    
    flexGridSizer11517->Add(0, 0, 0, wxALL, 5);
    
    wxArrayString m_listExcludeArr;
    m_listExclude = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), m_listExcludeArr, wxLB_SINGLE);
    m_listExclude->SetToolTip(_("The filepaths of any folders that shouldn't be searched for missing files"));
    
    flexGridSizer11517->Add(m_listExclude, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer124 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer11517->Add(boxSizer124, 1, wxRIGHT|wxBOTTOM|wxEXPAND, 5);
    
    m_button11921 = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer124->Add(m_button11921, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_button125 = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer124->Add(m_button125, 0, wxALL|wxEXPAND, 5);
    
    wxFlexGridSizer* flexGridSizer115171 = new wxFlexGridSizer(  0, 2, 0, 0);
    flexGridSizer115171->SetFlexibleDirection( wxBOTH );
    flexGridSizer115171->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer115171->AddGrowableCol(0);
    flexGridSizer115171->AddGrowableRow(1);
    
    boxSizer114->Add(flexGridSizer115171, 1, wxALL|wxEXPAND, 5);
    
    m_staticText116182 = new wxStaticText(this, wxID_ANY, _("Regexs to use (optional):"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer115171->Add(m_staticText116182, 0, wxALL, 5);
    
    flexGridSizer115171->Add(0, 0, 0, wxALL, 5);
    
    m_listCtrlRegexes = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(-1,-1), wxLC_SINGLE_SEL|wxLC_REPORT);
    m_listCtrlRegexes->SetToolTip(_("Most of the time you should find that files automatically get added to the most appropriate virtual directory. If yours don't, here you can add one or more regular expressions suitable for your situation. They'll be remembered for this project."));
    
    flexGridSizer115171->Add(m_listCtrlRegexes, 1, wxALL|wxEXPAND, 5);
    
    wxBoxSizer* boxSizer1245 = new wxBoxSizer(wxVERTICAL);
    
    flexGridSizer115171->Add(boxSizer1245, 1, wxRIGHT|wxBOTTOM|wxEXPAND, 5);
    
    m_button119216 = new wxButton(this, wxID_ANY, _("Add"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer1245->Add(m_button119216, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_button1257 = new wxButton(this, wxID_ANY, _("Remove"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    boxSizer1245->Add(m_button1257, 0, wxALL|wxEXPAND, 5);
    
    m_stdBtnSizer120 = new wxStdDialogButtonSizer();
    
    boxSizer114->Add(m_stdBtnSizer120, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_button121 = new wxButton(this, wxID_CANCEL, _(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer120->AddButton(m_button121);
    
    m_button122 = new wxButton(this, wxID_OK, _(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_button122->SetDefault();
    m_stdBtnSizer120->AddButton(m_button122);
    m_stdBtnSizer120->Realize();
    
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_button11921->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnIgnoreBrowse), NULL, this);
    m_button125->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnIgnoreRemove), NULL, this);
    m_button125->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnIgnoreRemoveUpdateUI), NULL, this);
    m_button119216->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnAddRegex), NULL, this);
    m_button1257->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnRemoveRegex), NULL, this);
    m_button1257->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnRemoveRegexUpdateUI), NULL, this);
    
}

ReconcileProjectFiletypesDlgBaseClass::~ReconcileProjectFiletypesDlgBaseClass()
{
    m_button11921->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnIgnoreBrowse), NULL, this);
    m_button125->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnIgnoreRemove), NULL, this);
    m_button125->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnIgnoreRemoveUpdateUI), NULL, this);
    m_button119216->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnAddRegex), NULL, this);
    m_button1257->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnRemoveRegex), NULL, this);
    m_button1257->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileProjectFiletypesDlgBaseClass::OnRemoveRegexUpdateUI), NULL, this);
    
}

ReconcileByRegexDlgBaseClass::ReconcileByRegexDlgBaseClass(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxCrafterjdrz3kInitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer141 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer141);
    
    wxFlexGridSizer* flexGridSizer157 = new wxFlexGridSizer(  0, 2, 0, 0);
    flexGridSizer157->SetFlexibleDirection( wxBOTH );
    flexGridSizer157->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    flexGridSizer157->AddGrowableCol(0);
    
    boxSizer141->Add(flexGridSizer157, 1, wxALL|wxEXPAND, 5);
    
    m_staticText145 = new wxStaticText(this, wxID_ANY, _("Enter the regex:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer157->Add(m_staticText145, 0, wxLEFT|wxRIGHT|wxTOP, 5);
    
    flexGridSizer157->Add(0, 0, 0, wxALL, 5);
    
    m_textCtrlRegex = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_PROCESS_ENTER);
    
    flexGridSizer157->Add(m_textCtrlRegex, 0, wxLEFT|wxTOP|wxBOTTOM|wxEXPAND, 5);
    
    flexGridSizer157->Add(0, 0, 0, wxALL, 5);
    
    m_staticText147 = new wxStaticText(this, wxID_ANY, _("Destination Virtual Directory:"), wxDefaultPosition, wxSize(-1,-1), 0);
    
    flexGridSizer157->Add(m_staticText147, 0, wxLEFT|wxRIGHT|wxTOP, 10);
    
    flexGridSizer157->Add(0, 0, 0, wxALL, 5);
    
    m_textCtrlVirtualFolder = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxSize(-1,-1), wxTE_PROCESS_ENTER);
    m_textCtrlVirtualFolder->SetToolTip(_("Select the virtual folder in which to place the matching files"));
    
    flexGridSizer157->Add(m_textCtrlVirtualFolder, 1, wxLEFT|wxTOP|wxBOTTOM|wxEXPAND|wxALIGN_CENTER_VERTICAL, 5);
    
    m_bmpButton21010 = new wxBitmapButton(this, wxID_ANY, wxXmlResource::Get()->LoadBitmap(wxT("wxdirpickerctrl")), wxDefaultPosition, wxSize(-1,-1), wxBU_AUTODRAW|wxBORDER_NONE);
    m_bmpButton21010->SetToolTip(_("Browse for virtual folder"));
    
    flexGridSizer157->Add(m_bmpButton21010, 0, wxALL|wxALIGN_CENTER_VERTICAL, 5);
    
    flexGridSizer157->Add(0, 0, 0, wxALL, 5);
    
    wxBoxSizer* boxSizer2088 = new wxBoxSizer(wxHORIZONTAL);
    
    flexGridSizer157->Add(boxSizer2088, 0, wxRIGHT|wxBOTTOM|wxEXPAND, 5);
    
    m_stdBtnSizer12011 = new wxStdDialogButtonSizer();
    
    boxSizer141->Add(m_stdBtnSizer12011, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, 5);
    
    m_button12112 = new wxButton(this, wxID_CANCEL, _(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_stdBtnSizer12011->AddButton(m_button12112);
    
    m_buttonOK = new wxButton(this, wxID_OK, _(""), wxDefaultPosition, wxSize(-1, -1), 0);
    m_buttonOK->SetDefault();
    m_stdBtnSizer12011->AddButton(m_buttonOK);
    m_stdBtnSizer12011->Realize();
    
    
    SetSizeHints(-1,-1);
    if ( GetSizer() ) {
         GetSizer()->Fit(this);
    }
    Centre(wxBOTH);
    // Connect events
    m_textCtrlRegex->Connect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(ReconcileByRegexDlgBaseClass::OnTextEnter), NULL, this);
    m_textCtrlVirtualFolder->Connect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(ReconcileByRegexDlgBaseClass::OnTextEnter), NULL, this);
    m_bmpButton21010->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileByRegexDlgBaseClass::OnVDBrowse), NULL, this);
    m_buttonOK->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileByRegexDlgBaseClass::OnRegexOKCancelUpdateUI), NULL, this);
    
}

ReconcileByRegexDlgBaseClass::~ReconcileByRegexDlgBaseClass()
{
    m_textCtrlRegex->Disconnect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(ReconcileByRegexDlgBaseClass::OnTextEnter), NULL, this);
    m_textCtrlVirtualFolder->Disconnect(wxEVT_COMMAND_TEXT_ENTER, wxCommandEventHandler(ReconcileByRegexDlgBaseClass::OnTextEnter), NULL, this);
    m_bmpButton21010->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(ReconcileByRegexDlgBaseClass::OnVDBrowse), NULL, this);
    m_buttonOK->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(ReconcileByRegexDlgBaseClass::OnRegexOKCancelUpdateUI), NULL, this);
    
}
