#!/bin/sh

################################################################################
## This file is part of CodeLite IDE and is released
## under the terms of the GNU General Public License as published by
##    the Free Software Foundation; either version 2 of the License, or
##    (at your option) any later version.
################################################################################

createPCH()
{
    if [ "$enable_pch" = "yes" ]; then
        # Compile the PCH
        echo "Generating PCH/Makefile..."
        current_wd=`pwd`

        cd ./PCH

        ## remove old Makefile
        rm -fr Makefile
        createVariables
        
        if [ "$enable_debug" = "yes" ]; then
            echo "all: precompiled_header_dbg.h.gch" >> Makefile
			echo "" >> Makefile
			echo "precompiled_header_dbg.h.gch: precompiled_header_dbg.h" >> Makefile
            echo "	\$(CMP) -c precompiled_header_dbg.h \$(CCFLAGS) -fPIC \$(INCLUDES)" >> Makefile
	    echo "clean: " >> Makefile
		echo "	\$(RM) -f precompiled_header_dbg.h.gch" >> Makefile
        else
            echo "all: precompiled_header_release.h.gch" >> Makefile
			echo "" >> Makefile
			echo "precompiled_header_release.h.gch: precompiled_header_release.h" >> Makefile
			echo "	\$(CMP) -c precompiled_header_release.h \$(CCFLAGS) -fPIC \$(INCLUDES)" >> Makefile
	    echo "clean: " >> Makefile
		echo "	\$(RM) -f precompiled_header_release.h.gch" >> Makefile
        fi
		
		cd "$current_wd"
    fi
}

createRevisionFile()
{
	chmod +x ./le_makerevision.sh
	./le_makerevision.sh
}

createVariables()
{
	#  Note the lack of -fPIC. Only use this for .so libs; strange and random bugs occur otherwise

	## set the executable name
	exe_name="Runtime/codelite"
	exe_name1="codelite"
	is_so_lib=$1
	additional_include_path=$2
	additional_links=$3

	## libclang support
	lib_clang_cmp_flags=""
	lib_clang_link_flags=""
	lib_clang=""
	with_clang="no"
	
	## is_64bit will probably hold yes or no, but could also contain data from an environmental variable
	compiler_extras="$is_64bit"
	c_compiler_extras="$is_64bit"
	
	
	# If it wasn't overridden, implement the normal behaviour
	if [ "$os_name" = "Darwin" ]; then
		if [ "$is_64bit" = "yes" ]; then
			compiler_extras="-m64 -DON_64_BIT "
			c_compiler_extras="-m64 -DON_64_BIT "
		elif [ "$is_64bit" = "no" ]; then
			compiler_extras="-m32 "
			c_compiler_extras="-m32 "

                        ## clang
                        lib_clang_cmp_flags=" -DHAS_LIBCLANG -I${CONFIGURE_PATH}/sdk/clang/include "
                        lib_clang_link_flags=" -L${CONFIGURE_PATH}/sdk/clang/lib -lclang "
                        lib_clang="${CONFIGURE_PATH}/sdk/clang/lib/libclang.dylib"
                        with_clang="yes"

		fi
	else # Not darwin
		if [ "$is_64bit" = "yes" ]; then
			
			compiler_extras="-DON_64_BIT "
			c_compiler_extras="-DON_64_BIT "
			
			## clang 
			lib_clang_cmp_flags=" -DHAS_LIBCLANG -I${CONFIGURE_PATH}/sdk/clang/Linux/x86_64/include "
			lib_clang_link_flags=" -L${CONFIGURE_PATH}/sdk/clang/Linux/x86_64/lib -lclang "
			lib_clang="${CONFIGURE_PATH}/sdk/clang/Linux/x86_64/lib/libclang.so"
			with_clang="yes"
			
		elif [ "$is_64bit" = "no" ]; then
			compiler_extras=""	# Otherwise the word 'no' will be used!
			c_compiler_extras=""
			
			## clang 
			lib_clang_cmp_flags=" -DHAS_LIBCLANG -I${CONFIGURE_PATH}/sdk/clang/Linux/i386/include "
			lib_clang_link_flags=" -L${CONFIGURE_PATH}/sdk/clang/Linux/i386/lib -lclang "
			lib_clang="${CONFIGURE_PATH}/sdk/clang/Linux/i386/lib/libclang.so"
			with_clang="yes"
			
		fi
	fi
	
	## Should we disable clang support?
	if [ "$disable_clang" = "yes" ]; then
		lib_clang_cmp_flags=""
		lib_clang_link_flags=""
		lib_clang=""
		with_clang="no"
	fi
	
	## link databaselayer backends
	dbl_links="-ldblayersqlite\$(EXT)"
	if [ "$enable_mysql" = "yes" ] ; then
		dbl_links="$dbl_links -ldblayermysql\$(EXT)"
	fi
	if [ "$enable_postgres" = "yes" ] ; then
		dbl_links="$dbl_links -ldblayerpostgres\$(EXT)"
	fi

	## If the non-plugin .so libs aren't installed with the plugin ones, add their dir to the rpath
	rpaths="-Wl,-rpath,\"$plugins_dir\""
	if [ "$non_plugins_dir" != "$plugins_dir" ]; then
		rpaths="$rpaths -Wl,-rpath,\"$non_plugins_dir\""
	fi

	if [ "$enable_debug" = "yes" ]; then
		objects_dir="Debug_gcc_unicode"
		configuration="Debug_gcc_unicode"
		debug_flag=" -g "
		ext=ud
		optimization=" -DREGEXP_UNICODE "
		wxcfg="--unicode=yes --debug=yes"
	else
		objects_dir="Release_gcc_unicode"
		configuration="Release_gcc_unicode"
		ext=u
		debug_flag=""
		optimization=" -O3 -DREGEXP_UNICODE "
		wxcfg="--unicode=yes --debug=no"
	fi

	echo "OPT=${optimization}" >> Makefile
	echo "DEBUG=${debug_flag}" >> Makefile
	echo "CXX=${compiler_name}" >> Makefile
	echo "CMP=\$(CXX) ${compiler_extras} \$(DEBUG) \$(OPT) " >> Makefile
	echo "CC=${c_compiler_name}" >> Makefile
	echo "GCC=\$(CC) ${c_compiler_extras}" >> Makefile
	echo "EXE_NAME=${exe_name}" >> Makefile
	echo "EXE_NAME_NO_PATH=${exe_name1}" >> Makefile
	echo "OBJ_DIR=${objects_dir}" >> Makefile
	echo "EXT=${ext}" >> Makefile
	echo "OUTPUT_DIR=lib" >> Makefile
	echo "WXCFG=${wxcfg}" >> Makefile
	echo "DESTDIR=" >> Makefile
	echo "" >> Makefile
	echo "CCFLAGS= ${lib_clang_cmp_flags} -Wall `wx-config --cxxflags ${wxcfg}` -fno-strict-aliasing -DASTYLE_LIB -DYY_NEVER_INTERACTIVE=1 -DGTK -DSCI_LEXER -DLINK_LEXERS -D__WX__ -DINSTALL_DIR=\"\\\"${prefix}/share/codelite\\\"\" -DPLUGINS_DIR=\"\\\"${plugins_dir}\\\"\"" >> Makefile
	echo "LINK_FLAGS =  ${lib_clang_link_flags} -L${base_dir}/\$(OUTPUT_DIR) ${rpaths} -lplugin\$(EXT) -lcodelite\$(EXT) -lwxsqlite3\$(EXT) -lwxscintilla\$(EXT) -lwxshapeframework\$(EXT) ${dbl_links} -L${base_dir}/sdk/sqlite3/lib `${wxconfiglibs} ${wxcfg}`" >> Makefile
	echo "PLUGIN_LINK_FLAGS =  -L${base_dir}/\$(OUTPUT_DIR) `${wxconfiglibs} ${wxcfg}` ${additional_links}" >> Makefile
	echo "INCLUDES := \$(INCLUDES) ${additional_include_path} " >> Makefile
	echo "" >> Makefile
	if [ "$os_name" != "Darwin" ] ; then
		echo "INCLUDES := \$(INCLUDES) \$(shell pkg-config --cflags gtk+-2.0)" >> Makefile
		echo "LINK_FLAGS := \$(LINK_FLAGS) \$(shell pkg-config --libs gtk+-2.0)" >> Makefile
		echo "PLUGIN_LINK_FLAGS := \$(PLUGIN_LINK_FLAGS) \$(shell pkg-config --libs gtk+-2.0)" >> Makefile
	else
		echo "CCFLAGS := \$(CCFLAGS) -D__APPLE__ -DMACOSX" >> Makefile
	fi
	if [ "$os_name" = "FreeBSD" ]; then
		echo "LINK_FLAGS += -lkvm" >> Makefile
	fi
	echo "INCLUDES := \$(INCLUDES) -I. -I${base_dir}/sdk/codelite_indexer/network -I${base_dir}/sdk/wxsqlite3/include -I${base_dir}/sdk/wxsqlite3/sqlite3/include -I${base_dir}/sdk/wxscintilla/include -I${base_dir}/sdk/wxscintilla/src/scintilla/include -I${base_dir}/sdk/wxscintilla/src/scintilla/src -I${base_dir}/sdk/wxscintilla/src/scintilla/lexlib -I${base_dir}/sdk/wxscintilla/src/scintilla/lexers -I${base_dir}/sdk/wxshapeframework/include -I${base_dir}/sdk/databaselayer/include/wx/dblayer/include -I${base_dir}/Interfaces -I${base_dir}/Debugger -I${base_dir}/Plugin -I${base_dir}/CodeLite -I${base_dir}/PCH " >> Makefile
	echo "" >> Makefile
	echo "" >> Makefile
}

createMainTargets()
{
	echo "## build targets" >> Makefile
	
	#database layer targets
	target_dbl="DatabaseLayerSQLite"
	if [ "$enable_mysql" = "yes" ]; then
		target_dbl="$target_dbl DatabaseLayerMySQL"
	fi
	if [ "$enable_postgres" = "yes" ]; then
		target_dbl="$target_dbl DatabaseLayerPostgres"
	fi

	## default
    if [ "$enable_pch" = "yes" ]; then
        pch_target=" pch_header "
    fi
	target_all="all : $pch_target pre_build Scintilla ShapeFramework $target_dbl SQLite CodeLite SDK codelite_clang codelite_indexer codelite_cppcheck Plugins LiteEditor "
  
	## additional database backends

	## if we are on Linux, print the post message
	if [ "$os_name" = "Linux" ]; then
		target_all="$target_all"
	fi

	if [ "$os_name" = "Darwin" ]; then
		target_all="$target_all Plugins mac_bundle"
	fi
    
	## add the "all" target to the makefile
	echo ".PHONY: PrintMsg codelite_clang" >> Makefile
	echo "${target_all}" >> Makefile
	echo "" >> Makefile
    
    if [ "$enable_pch" = "yes" ]; then
        echo "pch_header:" >> Makefile
        echo "	@cd PCH/ && \$(MAKE)" >> Makefile
        echo "" >> Makefile
    fi
    
	echo "codelite_indexer:" >> Makefile
	echo "	@cd sdk/codelite_indexer/ && \$(MAKE)" >> Makefile
	echo "	cp -fr sdk/codelite_indexer/codelite_indexer Runtime/." >> Makefile
	echo "" >> Makefile

	echo "codelite_clang:" >> Makefile
	if [ "$with_clang" = "yes" ]; then 
		echo "	@cd codelite_clang/ && \$(MAKE)" >> Makefile
		echo "" >> Makefile
	else
		echo "	@echo codelite-clang will not be build" >> Makefile
	fi

	echo "codelite_cppcheck:" >> Makefile
	echo "	@cd sdk/codelite_cppcheck/ && \$(MAKE)" >> Makefile
	echo "	cp -fr sdk/codelite_cppcheck/codelite_cppcheck Runtime/." >> Makefile
	echo "" >> Makefile

	echo "pre_build:" >> Makefile
	echo "	./le_makerevision.sh" >> Makefile
	echo "	@test -d  \$(OBJ_DIR) || mkdir \$(OBJ_DIR)" >> Makefile
	echo "	@test -d  \$(OUTPUT_DIR) || mkdir \$(OUTPUT_DIR)" >> Makefile
	echo "" >> Makefile

	echo "clean: clean_plugins" >> Makefile
	echo "	@cd PCH && \$(MAKE) clean" >> Makefile
	echo "	@cd sdk/codelite_indexer && \$(MAKE) clean" >> Makefile
	echo "	@cd sdk/codelite_cppcheck && \$(MAKE) clean" >> Makefile
	
	if [ "$with_clang" = "yes" ]; then 
		echo "	@cd codelite_clang/ && \$(MAKE) clean" >> Makefile
	fi
	echo "	\$(RM) \$(OUTPUT_DIR)/*.a \$(OUTPUT_DIR)/*.so" >> Makefile
	echo "	\$(RM) -fr \$(OBJ_DIR)" >> Makefile
	echo "" >> Makefile

	if [ "$os_name" = "Darwin" ]; then
		echo "mac_bundle: " >> Makefile
		echo "	@echo Creating Mac bundle..." >> Makefile
		echo "	@cd Runtime && ./make_mac_bundle.sh" >> Makefile
		echo "	@echo done" >> Makefile
		echo "" >> Makefile
	fi
}

createObjectList ()
{
	files_list="$1"
	object_list_name="$2"

	echo "${object_list_name} = \\"  >> Makefile
	for a_file in $files_list
	do
		a_file_no_ext=`basename $a_file .cxx`
		a_file_no_ext=`basename $a_file_no_ext .cpp`
		a_file_no_ext=`basename $a_file_no_ext .c`
		a_file_no_ext="${object_list_name}_${a_file_no_ext}"
		echo "	${configuration}/${a_file_no_ext}.o\\" >> Makefile
	done
	echo >> Makefile
}

createCodeLiteCppcheckMakefile ()
{
	files_list=$1
	echo "Generating sdk/codelite_cppcheck/Makefile..."
	current_wd=`pwd`

	cd ./sdk/codelite_cppcheck/

	## remove old Makefile
	rm -fr Makefile

	# is_64bit will probably hold yes or no, but could also contain data from an environmental variable
	cppchkcompiler_extras="$is_64bit"
	c_cppchkcompiler_extras="$is_64bit"

	# If it wasn't overridden, implement the normal behaviour
	if [ "$os_name" = "Darwin" ]; then
		if [ "$is_64bit" = "yes" ]; then
			cppchkcompiler_extras="-m64 -DON_64_BIT "
			c_cppchkcompiler_extras="-m64 -DON_64_BIT "
		elif [ "$is_64bit" = "no" ]; then
			cppchkcompiler_extras="-m32 "
			c_cppchkcompiler_extras="-m32 "
	fi
	else # Not darwin
	if [ "$is_64bit" = "yes" ]; then
			cppchkcompiler_extras="-DON_64_BIT "
			c_cppchkcompiler_extras="-DON_64_BIT "
		elif [ "$is_64bit" = "no" ]; then
			cppchkcompiler_extras=""	# Otherwise the word 'no' will be used!
			c_cppchkcompiler_extras=""
		fi
	fi

	if [ "$enable_debug" = "yes" ]; then
		debug_flag=" -g "
		configuration="Debug"
		optimization=" -O0 "
	else
		configuration="Release"
		debug_flag=""
		optimization=" -O2 "
	fi

	echo "OPT=${optimization}" >> Makefile
	echo "DEBUG=${debug_flag}" >> Makefile
	echo "CXX=${compiler_name}" >> Makefile
	echo "CMP=\$(CXX) ${cppchkcompiler_extras} \$(DEBUG) \$(OPT) " >> Makefile
	echo "CC=${c_compiler_name}" >> Makefile
	echo "GCC=\$(CC) ${c_cppchkcompiler_extras} \$(DEBUG) \$(OPT) " >> Makefile
	echo "" >> Makefile
	echo "all: codelite_cppcheck" >> Makefile

	createObjectList "cli/*.cpp lib/*.cpp" "codelite_cppcheck_objects"

	for a_file in $files_list
	do
		a_file_with_ext=`basename $a_file`
		a_file_no_ext=`basename $a_file .cxx`
		a_file_no_ext=`basename $a_file_no_ext .cpp`
		a_file_no_ext=`basename $a_file_no_ext .c`
		file_extension=`basename $a_file | cut -d. -f2`

		a_file_no_ext="${object_list_name}_$a_file_no_ext"

		if [ "$file_extension" = "c" ]; then
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(GCC) -c ${a_file} -I.  -o ${configuration}/${a_file_no_ext}.o -Ilib" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(GCC) -I.  -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file} -Ilib" >> Makefile
		else
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(CMP)  -c ${a_file} -I. -o ${configuration}/${a_file_no_ext}.o -Ilib" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(CMP) -I. -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file} -Ilib" >> Makefile
		fi

	done
	echo "-include ${configuration}/*.d" >> Makefile
	echo >> Makefile

	echo "codelite_cppcheck: make_dirs \$(codelite_cppcheck_objects)" >> Makefile

	## On FreeBSD, -ldl is part og libc
	if [ "$os_name" = "FreeBSD" ]; then
		echo "	\$(CMP) -o codelite_cppcheck \$(codelite_cppcheck_objects) -lpthread " >> Makefile
	else
		echo "	\$(CMP) -o codelite_cppcheck \$(codelite_cppcheck_objects) -lpthread -ldl " >> Makefile
	fi

	echo >> Makefile

	echo "make_dirs:" >> Makefile
	echo "	@echo" >> Makefile
	echo "	@echo \"----------Building project:[ codelite_cppcheck - ${configuration} ]----------\"" >> Makefile
	echo "	@echo" >> Makefile
	echo "	test -d ${configuration} || mkdir ${configuration}" >> Makefile
	echo >> Makefile

	echo "clean: " >> Makefile
	echo "	\$(RM) -fr ${configuration}/*.o" >> Makefile
	echo "	\$(RM) -fr ${configuration}/*.o.d" >> Makefile
	echo "	\$(RM) -fr codelite_cppcheck" >> Makefile

	## restore the path
	cd "$current_wd"
}

createCodeLiteClangMakefile()
{
	files_list="$1"
	echo "Generating codelite_clang/Makefile..."
	current_wd=`pwd`

	cd ./codelite_clang/

	## remove old Makefile
	rm -fr Makefile

	if [ "$enable_debug" = "yes" ]; then
		debug_flag=" -g "
		configuration="Debug"
		optimization=" -O0 "
	else
		configuration="Release"
		debug_flag=""
		optimization=" -O2 "
	fi

	echo "OPT=${optimization}" >> Makefile
	echo "DEBUG=${debug_flag}" >> Makefile
	echo "CXX=${compiler_name}" >> Makefile
	echo "CMP=\$(CXX) \$(DEBUG) \$(OPT) " >> Makefile
	echo "CC=${c_compiler_name}" >> Makefile
	echo "GCC=\$(CC) \$(DEBUG) \$(OPT) " >> Makefile
	echo "" >> Makefile
	echo "all: codelite_clang" >> Makefile

	createObjectList "*.cpp" "codelite_clang_objects"
	
	for a_file in $files_list
	do
		a_file_with_ext=`basename $a_file`
		a_file_no_ext=`basename $a_file_with_ext .cpp`
		file_extension=`basename $a_file | cut -d. -f2`
		
		a_file_no_ext="codelite_clang_objects"_${a_file_no_ext}
		
		
		echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
		echo "	\$(CMP) ${lib_clang_cmp_flags} `wx-config --cflags --unicode` -c ${a_file} -o ${configuration}/${a_file_no_ext}.o" >> Makefile
		echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
		echo "	\$(CMP) ${lib_clang_cmp_flags} `wx-config --cflags --unicode` -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file}" >> Makefile
	done
	
	echo "-include ${configuration}/*.d" >> Makefile
	echo >> Makefile

	echo "codelite_clang: make_dirs \$(codelite_clang_objects)" >> Makefile

	## On FreeBSD, -ldl is part og libc
	if [ "$os_name" = "FreeBSD" ]; then
		echo "	\$(CMP) -o codelite-clang ${rpaths} ${lib_clang_link_flags} \$(codelite_clang_objects) -lpthread `wx-config --libs --unicode`" >> Makefile
	else
		echo "	\$(CMP) -o codelite-clang ${rpaths} ${lib_clang_link_flags} \$(codelite_clang_objects) -lpthread -ldl `wx-config --libs --unicode`" >> Makefile
	fi

	echo >> Makefile

	echo "make_dirs:" >> Makefile
	echo "	@echo" >> Makefile
	echo "	@echo \"----------Building project:[ codelite_clang  ${configuration} ]----------\"" >> Makefile
	echo "	@echo" >> Makefile
	echo "	test -d ${configuration} || mkdir ${configuration}" >> Makefile
	echo >> Makefile

	echo "clean: " >> Makefile
	echo "	\$(RM) -fr ${configuration}/*.o" >> Makefile
	echo "	\$(RM) -fr ${configuration}/*.o.d" >> Makefile
	echo "	\$(RM) -fr codelite-clang" >> Makefile

	## restore the path
	cd "$current_wd"
}

createCodeLiteIndexerMakefile ()
{
	files_list="$1"
	echo "Generating sdk/codelite_indexer/Makefile..."
	current_wd=`pwd`

	cd ./sdk/codelite_indexer/

	## remove old Makefile
	rm -fr Makefile

	# is_64bit will probably hold yes or no, but could also contain data from an environmental variable
	indexercompiler_extras="$is_64bit"
	c_indexercompiler_extras="$is_64bit"

	# If it wasn't overridden, implement the normal behaviour
	if [ "$os_name" = "Darwin" ]; then
		if [ "$is_64bit" = "yes" ]; then
			indexercompiler_extras="-m64 -DON_64_BIT "
			c_indexercompiler_extras="-m64 -DON_64_BIT "
		elif [ "$is_64bit" = "no" ]; then
			indexercompiler_extras="-m32 "
			c_indexercompiler_extras="-m32 "
	fi
	else # Not darwin
	if [ "$is_64bit" = "yes" ]; then
			indexercompiler_extras="-DON_64_BIT "
			c_indexercompiler_extras="-DON_64_BIT "
		elif [ "$is_64bit" = "no" ]; then
			indexercompiler_extras=""	# Otherwise the word 'no' will be used!
			c_indexercompiler_extras=""
		fi
	fi

	if [ "$enable_debug" = "yes" ]; then
		debug_flag=" -g "
		configuration="Debug"
		optimization=" -O0 "
	else
		configuration="Release"
		debug_flag=""
		optimization=" -O2 "
	fi

	echo "OPT=${optimization}" >> Makefile
	echo "DEBUG=${debug_flag}" >> Makefile
	echo "CXX=${compiler_name}" >> Makefile
	echo "CMP=\$(CXX) ${indexercompiler_extras} \$(DEBUG) \$(OPT) " >> Makefile
	echo "CC=${c_compiler_name}" >> Makefile
	echo "GCC=\$(CC) ${c_indexercompiler_extras} \$(DEBUG) \$(OPT) " >> Makefile
	echo "" >> Makefile
	echo "all: codelite_indexer" >> Makefile

	createObjectList "network/*.cpp libctags/*.c *.cpp" "codelite_indexer_objects"

	for a_file in $files_list
	do
		a_file_with_ext=`basename $a_file`
		a_file_no_ext=`basename $a_file .cxx`
		a_file_no_ext=`basename $a_file_no_ext .cpp`
		a_file_no_ext=`basename $a_file_no_ext .c`
		file_extension=`basename $a_file | cut -d. -f2`

		a_file_no_ext="${object_list_name}_$a_file_no_ext"

		if [ "$file_extension" = "c" ]; then
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(GCC) -c ${a_file} -DHAVE_CONFIG_H -I. -Ilibctags  -o ${configuration}/${a_file_no_ext}.o" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(GCC) -DHAVE_CONFIG_H -I. -Ilibctags  -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file}" >> Makefile
		else
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(CMP) `wx-config --cflags --unicode` -c ${a_file} -DHAVE_CONFIG_H -I. -Ilibctags -o ${configuration}/${a_file_no_ext}.o" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(CMP) `wx-config --cflags --unicode` -DHAVE_CONFIG_H -I. -Ilibctags  -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file}" >> Makefile
		fi

	done
	echo "-include ${configuration}/*.d" >> Makefile
	echo >> Makefile

	echo "codelite_indexer: make_dirs \$(codelite_indexer_objects)" >> Makefile

	## On FreeBSD, -ldl is part og libc
	if [ "$os_name" = "FreeBSD" ]; then
		echo "	\$(CMP) -o codelite_indexer \$(codelite_indexer_objects) -lpthread `wx-config --libs --unicode`" >> Makefile
	else
		echo "	\$(CMP) -o codelite_indexer \$(codelite_indexer_objects) -lpthread -ldl `wx-config --libs --unicode`" >> Makefile
	fi

	echo >> Makefile

	echo "make_dirs:" >> Makefile
	echo "	@echo" >> Makefile
	echo "	@echo \"----------Building project:[ codelite_indexer - ${configuration} ]----------\"" >> Makefile
	echo "	@echo" >> Makefile
	echo "	test -d ${configuration} || mkdir ${configuration}" >> Makefile
	echo >> Makefile

	echo "clean: " >> Makefile
	echo "	\$(RM) -fr ${configuration}/*.o" >> Makefile
	echo "	\$(RM) -fr ${configuration}/*.o.d" >> Makefile
	echo "	\$(RM) -fr codelite_indexer" >> Makefile

	## restore the path
	cd "$current_wd"
}

## The rules created here all contain -fPIC. Any other shared-lib-creating functions *must* do this too
##
createRules_sharedObject ()
{
	files_list=$1
	object_list_name=$2
	rule_name=$3
	libname=$4
	# createRules_sharedObject() creates both plugin and non-plugin libs
	# For plugins, we want a cp -f line at the end to copy them to Runtime/plugins.
	# For non-plugins we don't: they're installed direct from ./lib
	dont_copy=$5
	# Only use any additional link options on the Mac:
	# they're not needed for Linux, and (on Linux at least) they break -j2
	additional_link_libs=""
	if [ "$os_name" = "Darwin" ];then
	  additional_link_libs=$6
	  additional_link_libs="$additional_link_libs -headerpad_max_install_names"
	elif [ "$rule_name" = "DatabaseExplorer" ]; then
		additional_link_libs=$6
	fi
	
	additional_flags=$7
	
	pch_flags=""
	if [ "$enable_pch" = "yes" ]; then
		if [ "$enable_debug" = "yes" ]; then
			pch_flags=" -include precompiled_header_dbg.h -Winvalid-pch "
		else
			pch_flags=" -include precompiled_header_release.h -Winvalid-pch "
		fi
	fi

	if [ "$rule_name" = "ShapeFramework" ] ; then
	 	createVariables "yes" "-I${base_dir}/sdk/wxshapeframework/src"
		additional_flags="$additional_flags -DWXMAKINGDLL_WXSF -DWXMAKINGDLL_WXXS"
	elif [ "$rule_name" = "DatabaseLayerSQLite" ] ; then
	  	createVariables "yes" "-I${base_dir}/sdk/databaselayer/src/sqlite3"
	elif [ "$rule_name" = "DatabaseLayerMySQL" ] ; then
	  	createVariables "yes" "-I/usr/include/mysql"
	elif [ "$rule_name" = "DatabaseLayerPostgres" ] ; then
	  	createVariables "yes" "-I/usr/include/postgresql"
	elif [ "$rule_name" = "DatabaseExplorer" ] ; then
		
		if [ "$os_name" != "Darwin" ];then
			createVariables "yes" " " "-Wl,--no-as-needed"
		fi
	else
	  	createVariables "yes"
	fi

	for a_file in $files_list
	do

		a_file_with_ext=`basename $a_file`
		a_file_no_ext=`basename $a_file .cxx`
		a_file_no_ext=`basename $a_file_no_ext .cpp`
		a_file_no_ext=`basename $a_file_no_ext .c`
		file_extension=`basename $a_file | cut -d. -f2`

		a_file_no_ext="${object_list_name}_$a_file_no_ext"

		if [ "$file_extension" = "c" ]; then
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(GCC) -c ${a_file} -fPIC \$(CCFLAGS) ${additional_flags} \$(INCLUDES) -o ${configuration}/${a_file_no_ext}.o" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(GCC) -fPIC \$(CCFLAGS) ${additional_flags} \$(INCLUDES) -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file}" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.i:  >> Makefile
			echo "	\$(GCC) -fPIC \$(CCFLAGS) ${additional_flags} \$(INCLUDES) -E -o ${configuration}/${a_file_no_ext}.o.i ${a_file}" >> Makefile
		else
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(CMP) ${pch_flags} -c ${a_file} -fPIC \$(CCFLAGS) ${additional_flags} \$(INCLUDES) -o ${configuration}/${a_file_no_ext}.o" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(CMP) -fPIC \$(CCFLAGS) ${additional_flags} \$(INCLUDES) -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file}" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.i:  >> Makefile
			echo "	\$(CMP) -fPIC \$(CCFLAGS) ${additional_flags} \$(INCLUDES) -E -o ${configuration}/${a_file_no_ext}.o.i ${a_file}" >> Makefile
		fi
	done
	echo >> Makefile

	shared_obj_switch=" -shared "
	if [ "$os_name" = "Darwin" ]; then
		shared_obj_switch=" -dynamiclib "
	fi

	if [ "$enable_pch" = "yes" ]; then
        	pch_target=" pch_header "
    	fi
	
	if [ "$rule_name" = "SDK" ]; then
		echo "${rule_name}: ${pch_header} CodeLite \$(${object_list_name}) " >> Makefile
	else 
		echo "${rule_name}: ${pch_header} \$(${object_list_name})" >> Makefile
	fi
	
	echo "	\$(CMP) -fPIC ${shared_obj_switch} -o ${base_dir}/\$(OUTPUT_DIR)/${libname}.so \$(${object_list_name}) \$(PLUGIN_LINK_FLAGS) ${additional_link_libs} -lutil" >> Makefile
	if [ $dont_copy != "dont_copy" ]; then
		echo "	cp -f ${base_dir}/\$(OUTPUT_DIR)/${libname}.so ${runtime_path}/." >> Makefile
	fi
	echo >> Makefile
	echo "-include ${configuration}/*.o.d" >> Makefile
	echo >> Makefile
}

createRules_exe ()
{
	files_list=$1
	object_list_name=$2
	rule_name=$3
	exename=$4
	pch_flags=""
        if [ "$enable_pch" = "yes" ]; then
                if [ "$enable_debug" = "yes" ]; then
                        pch_flags=" -fPIC -include precompiled_header_dbg.h -Winvalid-pch "
                else
                        pch_flags=" -fPIC -include precompiled_header_release.h -Winvalid-pch "
                fi
        fi

	for a_file in $files_list
	do

		a_file_with_ext=`basename $a_file`
		a_file_no_ext=`basename $a_file .cxx`
		a_file_no_ext=`basename $a_file_no_ext .cpp`
		a_file_no_ext=`basename $a_file_no_ext .c`
		file_extension=`basename $a_file | cut -d. -f2`

		a_file_no_ext="${object_list_name}_$a_file_no_ext"

		if [ "$file_extension" = "c" ]; then
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(GCC) -c ${a_file} \$(CCFLAGS) \$(INCLUDES) -o ${configuration}/${a_file_no_ext}.o" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(GCC) \$(CCFLAGS) \$(INCLUDES) -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file}" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.i:  >> Makefile
			echo "	\$(GCC) \$(CCFLAGS) \$(INCLUDES) -E -o ${configuration}/${a_file_no_ext}.o.i ${a_file}" >> Makefile
		else
			echo ${configuration}/${a_file_no_ext}.o: ${a_file} ${configuration}/${a_file_no_ext}.o.d >> Makefile
			echo "	\$(CMP) ${pch_flags} -c ${a_file} \$(CCFLAGS) \$(INCLUDES) -o ${configuration}/${a_file_no_ext}.o" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.d:  >> Makefile
			echo "	\$(CMP) \$(CCFLAGS) \$(INCLUDES) -MT${configuration}/${a_file_no_ext}.o -MF${configuration}/${a_file_no_ext}.o.d  -MM ${a_file}" >> Makefile
			echo ${configuration}/${a_file_no_ext}.o.i:  >> Makefile
			echo "	\$(CMP) \$(CCFLAGS) \$(INCLUDES) -E -o ${configuration}/${a_file_no_ext}.o.i ${a_file}" >> Makefile
		fi
	done
	echo >> Makefile
	
	echo "${rule_name}: \$(${object_list_name}) SDK" >> Makefile
	if [ "$os_name" = "Darwin" ]; then
		echo "	\$(CMP) -o ${exename} \$(${object_list_name}) \$(LINK_FLAGS) -headerpad_max_install_names" >> Makefile
	
	else
		echo "	\$(CMP) -o ${exename} \$(${object_list_name}) \$(LINK_FLAGS)" >> Makefile
	fi
	
	echo "	@echo ==========================================================" >> Makefile
	echo "	@echo Done, please run \"sudo \$(MAKE) install\"." >> Makefile
	echo "	@echo ==========================================================" >> Makefile
	echo >> Makefile
}

createPluginMakefile()
{
	plugin_path="$1"
	plugin_name="$2"
	install_path="$3"
	post_install_path="$4"

	echo "Generating ${plugin_path}/Makefile..."
	current_wd=`pwd`
	cd ${plugin_path}

	## remove old Makefile
	rm -fr Makefile

	## set the plugin path relative to the main path
	base_dir=".."


	if [ "$plugin_name" = "CppCheck" ] ; then
	  createVariables "yes" "-I../sdk/codelite_cppcheck/"
	elif [ "$plugin_name" = "DatabaseExplorer" ] ; then
	  createVariables "yes" "-I../sdk/databaselayer/include/"
	else
	  createVariables "yes"
	fi

	createObjectList "*.cpp" "${plugin_name}Objects"

	createPluginTargets "${plugin_name}" "${post_install_path}"
	if [ "$plugin_name" = "Subversion2" ] ; then
	 	createRules_sharedObject "*.cpp" "${plugin_name}Objects" "${plugin_name}" "${plugin_name}" "copy" "-L../lib -lplugin\$(EXT) -lcodelite\$(EXT) -lwxscintilla\$(EXT)"
	elif [ "$plugin_name" = "DatabaseExplorer" ] ; then
		## create custom CCFLAGS
		dbl_flags="-DDBL_USE_SQLITE"
		if [ "$enable_mysql" = "yes" ] ; then
			dbl_flags="$dbl_flags -DDBL_USE_MYSQL"
		fi
		if [ "$enable_postgres" = "yes" ] ; then
			dbl_flags="$dbl_flags -DDBL_USE_POSTGRES"
		fi

		## link databaselayer backends
		dbl_libs="-ldblayersqlite\$(EXT)"
		if [ "$enable_mysql" = "yes" ] ; then
			dbl_libs="$dbl_libs -ldblayermysql\$(EXT)"
		fi
		if [ "$enable_postgres" = "yes" ] ; then
			dbl_libs="$dbl_libs -ldblayerpostgres\$(EXT)"
		fi
	  	createRules_sharedObject "*.cpp" "${plugin_name}Objects" "${plugin_name}" "${plugin_name}" "copy" "-L../lib -lplugin\$(EXT) -lcodelite\$(EXT) -lwxscintilla\$(EXT) -lwxshapeframework\$(EXT) ${dbl_libs}" "${dbl_flags}"
	else
	  	createRules_sharedObject "*.cpp" "${plugin_name}Objects" "${plugin_name}" "${plugin_name}" "copy" "-L../lib -lplugin\$(EXT) -lcodelite\$(EXT) -lwxscintilla\$(EXT) -lwxsqlite3\$(EXT)"
	fi

	## restore the path
	cd "$current_wd"

	echo ".PHONY: ${plugin_name} ${plugin_name}_clean ${plugin_name}_install" >> Makefile
	echo "${plugin_name}: CodeLite SDK SQLite" >> Makefile
	echo "	@\$(MAKE) -C ${plugin_path} -f Makefile" >> Makefile
	echo "" >> Makefile

	echo "${plugin_name}_clean:" >> Makefile
	echo "	@\$(MAKE) -C ${plugin_path} -f Makefile clean" >> Makefile
	echo "" >> Makefile

	echo "${plugin_name}_install:" >> Makefile
	echo "	@mkdir -p \"${install_path}\"" >> Makefile
	echo "	cp \$(OUTPUT_DIR)/${plugin_name}.so \"${install_path}\"" >> Makefile
	echo "" >> Makefile
}

createPluginTargets()
{
	plugin_name=$1
	runtime_path=$2

	echo "## build targets" >> Makefile
	echo "all :  pre_build ${plugin_name} post_build" >> Makefile
	echo "" >> Makefile
	echo "pre_build:" >> Makefile
    echo "	@echo" >> Makefile
	echo "	@echo \"----------Building project:[ ${plugin_name} - ${configuration} ]----------\"" >> Makefile
	echo "	@echo" >> Makefile
	echo "	@test -d  \$(OBJ_DIR) || mkdir \$(OBJ_DIR)" >> Makefile
	echo "	@test -d  ${base_dir}/\$(OUTPUT_DIR) || mkdir ${base_dir}/\$(OUTPUT_DIR)" >> Makefile
	## Ensure that ${runtime_path} exists. It should already, but might not when cloning a git repository (depending on its .gitignore)
	echo "	@test -d  ${runtime_path} || mkdir ${runtime_path}" >> Makefile
	echo "" >> Makefile
	echo "clean:" >> Makefile
	echo "	\$(RM) ${base_dir}/\$(OUTPUT_DIR)/${plugin_name}.so" >> Makefile
	echo "	\$(RM) -fr \$(OBJ_DIR)" >> Makefile
	echo "	\$(RM) -fr ${runtime_path}/${plugin_name}.so" >> Makefile
	echo "" >> Makefile

	echo "post_build:" >> Makefile
	# Don't copy to ${runtime_path} here, do it in the target; otherwise it breaks 'make -j2'
	echo "" >> Makefile

}

createInstallTarget()
{
	echo "install: uninstall core_install plugins_install" >> Makefile
	echo "" >> Makefile

	echo "core_install:" >> Makefile
	echo "	@echo installing CodeLite" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/CodeLite\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/share/codelite\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/bin\"" >> Makefile
	echo "	@cp \$(EXE_NAME) \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	if [ "$make_symlink" = "yes" ] ; then
	  echo "	@ln -s \$(EXE_NAME_NO_PATH) \"\$(DESTDIR)${prefix}/bin/CodeLite\"" >> Makefile
	  echo "	@chmod +x \"\$(DESTDIR)${prefix}/bin/CodeLite\"" >> Makefile
	fi
	echo "	@cp Runtime/codelite_fix_files \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	echo "	@cp Runtime/codelite_exec \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	echo "	@cp Runtime/codelite_kill_children \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	echo "	@cp Runtime/codelite_xterm \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	echo "	@chmod +x \"\$(DESTDIR)${prefix}/bin/codelite_fix_files\"" >> Makefile
	echo "	@chmod +x \"\$(DESTDIR)${prefix}/bin/codelite_exec\"" >> Makefile
	echo "	@chmod +x \"\$(DESTDIR)${prefix}/bin/codelite_kill_children\"" >> Makefile
	echo "	@chmod +x \"\$(DESTDIR)${prefix}/bin/codelite_xterm\"" >> Makefile
	echo "	@cp sdk/codelite_indexer/codelite_indexer \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	if [ "$with_clang" = "yes" ]; then 
		echo "	@cp codelite_clang/codelite-clang \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	fi
	echo "	@cp sdk/codelite_cppcheck/codelite_cppcheck \"\$(DESTDIR)${prefix}/bin/\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/applications\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/codelite\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/codelite/config\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/codelite/templates\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${plugins_dir}/\"" >> Makefile
	# In case the non-plugin.so libs aren't to go into the same dir as plugins...
	echo "	@mkdir -p \"\$(DESTDIR)${non_plugins_dir}/\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${plugins_dir}/debuggers\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${plugins_dir}/resources\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/codelite/images\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/codelite/rc\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/codelite/lexers\"" >> Makefile
	echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/codelite/src/\"" >> Makefile
	echo "	@cp -fr Runtime/plugins/resources/*.* \"\$(DESTDIR)${plugins_dir}/resources/\"" >> Makefile
	echo "	@cp -fr Runtime/config/build_settings.xml.default \"\$(DESTDIR)${prefix}/share/codelite/config/\"" >> Makefile
	echo "	@cp -fr Runtime/config/plugins.xml.default \"\$(DESTDIR)${prefix}/share/codelite/config/\"" >> Makefile
	echo "	@cp -fr Runtime/config/debuggers.xml.gtk \"\$(DESTDIR)${prefix}/share/codelite/config/debuggers.xml.default\"" >> Makefile
	echo "	@cp -fr Runtime/config/codelite.xml.default.gtk \"\$(DESTDIR)${prefix}/share/codelite/config/codelite.xml.default\"" >> Makefile
	echo "	@cp -fr Runtime/codelite.desktop \"\$(DESTDIR)${prefix}/share/applications/codelite.desktop\"; " >> Makefile
	echo "	@cp -fpr Runtime/rc/*.xrc \"\$(DESTDIR)${prefix}/share/codelite/rc/\"" >> Makefile
	echo "	@cp -fpr Runtime/templates/* \"\$(DESTDIR)${prefix}/share/codelite/templates/\"" >> Makefile
	echo "	@chmod -R +w \"\$(DESTDIR)${prefix}/share/codelite/templates\"/* " >> Makefile
	echo "	@cp -fpr Runtime/lexers/*.xml \"\$(DESTDIR)${prefix}/share/codelite/lexers/\"" >> Makefile
	echo "	@cp -fpr lib/lib*${ext}.so \"\$(DESTDIR)${non_plugins_dir}/\"" >> Makefile
	echo "	@chmod 0644 \"\$(DESTDIR)${non_plugins_dir}\"/*.so" >> Makefile
	echo "	@cp -fpr lib/Debugger.so \"\$(DESTDIR)${plugins_dir}/debuggers/\"" >> Makefile
	echo "	@chmod 0644 \"\$(DESTDIR)${plugins_dir}/debuggers\"/*.so" >> Makefile
	echo "	@cp -fpr Runtime/index.html \"\$(DESTDIR)${prefix}/share/codelite/\"" >> Makefile
	echo "	@cp -fpr InnoSetup/license.txt \"\$(DESTDIR)${prefix}/share/codelite/LICENSE\"" >> Makefile
	echo "	@cp -fpr Runtime/astyle.sample \"\$(DESTDIR)${prefix}/share/codelite/\"" >> Makefile
	echo "	@cp -fpr Runtime/svnreport.html \"\$(DESTDIR)${prefix}/share/codelite/\"" >> Makefile
	echo "	@cp -fpr Runtime/images/*.png \"\$(DESTDIR)${prefix}/share/codelite/images/\"" >> Makefile
	echo "	@cp -fpr Runtime/config/accelerators.conf.default \"\$(DESTDIR)${prefix}/share/codelite/config/\"" >> Makefile
	echo "	@cp -fpr Runtime/src/*.gz \"\$(DESTDIR)${prefix}/share/codelite/src/\"" >> Makefile
	echo "	@cp -fpr Runtime/codelite-icons.zip \"\$(DESTDIR)${prefix}/share/codelite/\"" >> Makefile
	echo "	@cp -fpr Runtime/codelite-icons-fresh-farm.zip \"\$(DESTDIR)${prefix}/share/codelite/\"" >> Makefile
	echo "	@chmod 0666 \"\$(DESTDIR)${prefix}/share/codelite/codelite-icons.zip\"" >> Makefile
	
	if [ "$with_clang" = "yes" ]; then 
		echo "	@cp -fpr ${lib_clang} \"\$(DESTDIR)${non_plugins_dir}/\"" >> Makefile
	fi
	
	if [ "$add_desktop_icon" = "yes" ] ; then
	  if test -d $HOME/Desktop/ ; then
	    echo "	@cp -fpr Runtime/codelite.desktop $HOME/Desktop/" >> Makefile
		echo "	@chmod +x $HOME/Desktop/codelite.desktop" >> Makefile
	  fi
	fi
	if [ "$install_translations" = "yes" ] ; then
		# Runtime/locale contains the domain name, but not LC_MESSAGES/
	  for lang in Runtime/locale/* ; do
		lang=`basename $lang`
		if test -f Runtime/locale/$lang/codelite.mo ; then
			echo "	@mkdir -p \"\$(DESTDIR)${prefix}/share/locale/$lang/LC_MESSAGES\"" >> Makefile
			echo "	@cp -f Runtime/locale/$lang/codelite.mo   \"\$(DESTDIR)${prefix}/share/locale/$lang/LC_MESSAGES/\"" >> Makefile
		fi
	  done
	fi
	echo "" >> Makefile
}

createUnInstallTarget()
{
	echo "uninstall: " >> Makefile
	echo "	@echo Uninstalling CodeLite" >> Makefile
	if [ "$make_symlink" = "yes" ] ; then
	  echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/CodeLite\"\"" >> Makefile
	fi
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite_fix_files\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite_exec\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite_kill_children\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite_xterm\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite_indexer\"" >> Makefile
	if [ "$with_clang" = "yes" ]; then 
		echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite-clang\"" >> Makefile
	fi
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite_cppcheck\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/CodeLiteUR\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/CodeLiteUD\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/bin/codelite\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/include/UnitTest++/\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/lib/libUnitTest++.a\"" >> Makefile
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${prefix}/share/codelite\"" >> Makefile
	# Avoid deleting /usr/lib
	if [ "$non_plugins_dir" != "/usr/lib" ] && [ "$non_plugins_dir" != "/usr/lib/" ] ; then
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${non_plugins_dir}/\"" >> Makefile
	fi
	if [ "$plugins_dir" != "/usr/lib" ] && [ "$plugins_dir" != "/usr/lib/" ] ; then
	echo "	@\$(RM) -fr  \"\$(DESTDIR)${plugins_dir}/\"" >> Makefile
    fi
    # Check write permission for /usr/share/applications, in case we're using a 'local' prefix and not doing sudo
	echo "	@if test -w \"\$(DESTDIR)${prefix}/share/applications\" ; then \\" >> Makefile
	    echo "	  \$(RM) -fr \"\$(DESTDIR)${prefix}/share/applications/codelite.desktop\"; \\" >> Makefile
	echo "	fi" >> Makefile
	echo "	@\$(RM) -fr ~/Desktop/codelite.desktop" >> Makefile
	if [ "$install_translations" = "yes" ] ; then
		for lang in Runtime/locale/* ; do
			lang=`basename $lang`
			if test -f Runtime/locale/$lang/codelite.mo ; then
				echo "	@\$(RM) \"\$(DESTDIR)${prefix}/share/locale/$lang/LC_MESSAGES/codelite.mo\"" >> Makefile
			fi
		done
	fi
	echo "" >> Makefile
}

Show_Help_and_Exit()
{
	echo "This is the CodeLite configure script"
	echo "Usage: ./configure [OPTION]..."
	echo "Available options:"
	echo "  --prefix=PREFIX         install files into the filepath PREFIX (the default is /usr)"
	echo "  --plugins-dir=PLUGINSDIR   install plugins into the filepath PLUGINSDIR (the default is \$PREFIX/lib/codelite)"
	echo "  --enable-debug          create a debug build (the default is disable)"
	echo "  --enable-mysql          enable MySQL support in DatabaseExplorer plugin (MySQL connector sources must be installed on the system)"
	echo "  --enable-postgres       enable PostgreSQL support in DatabaseExplorer plugin (PostgreSQL connector sources must be installed on the system)"
	echo "  --enable-pch            generate Makefiles that use pre-compiled headers to reduce compile time"
	echo "  --without-clang         disable clang support in codelite"
	echo "  --help                  show this help"
	echo "To build with alternative C++ or C compilers, specify them in the environmental variables CXX and/or CC"
	echo "Either do: CXX=\"foo\" ./configure --<etc>"
	echo "Or in that shell earlier, do: export CXX=\"foo\""
	echo "Similarly you can put build flags e.g. \"-arch i386\" in the environmental variable ARCH_FLAGS"
	exit
}

## main
# checkCURL
CONFIGURE_PATH=`pwd`

## Create variables needed by the makefile
enable_debug="no"
prefix="/usr"
plugins_dir="/usr/lib/codelite"
add_desktop_icon="yes"
make_symlink="no"
install_translations="yes";
os_name=`uname -s`
arch=`uname -m`
enable_mysql="no"
enable_postgres="no"

## Which wx version is being used for this build?
wxversionnumber=`wx-config --version 2>/dev/null`
if [ -z "$wxversionnumber" ]; then
	# No wx-config, so why continue?
	echo "No functional wx-config script was found in your PATH"
	echo "Is the wxWidgets development package installed?"
	exit
fi

wxMAJOR_VERSION=`echo $wxversionnumber | awk -F. '{print $1}'`
wxMINOR_VERSION=`echo $wxversionnumber | awk -F. '{print $2}'`
# Should we ever need it: wxRELEASE_NUMBER=`echo $wxversionnumber | awk -F. '{print $3}'`

## wx versions 2.9 and greater need an extra 'std,aui' in wx-config --libs
 # NB this logic will fail for wx versions < 2 ;)

if [ "$os_name" != "Darwin" ]; then
wxconfiglibs="wx-config --libs std,aui"
if [ "$wxMAJOR_VERSION" -eq 2 ] && [ "$wxMINOR_VERSION" -lt 9 ]; then
	wxconfiglibs="wx-config --libs"
fi
else
wxconfiglibs="wx-config --libs std"
if [ "$wxMAJOR_VERSION" -eq 2 ] && [ "$wxMINOR_VERSION" -lt 9 ]; then
	wxconfiglibs="wx-config --libs"
fi
fi

## Replace place holders in the desktop file
rm -fr Runtime/codelite.desktop
sed s@%%PREFIX%%@$prefix@g Runtime/codelite.desktop.template >> Runtime/codelite.desktop

## Determine if we are on 64 bit machine
## AMD / Intel will produce x86_64
## while itanium produces ia64
is_64bit="no"
if [ "$arch" = "x86_64" ] || [ "$arch" = "ia64" ]; then
	is_64bit="yes"
fi
# Now we've set it, override it if the user wishes
if [ -n "$ARCH_FLAGS" ]; then
	is_64bit="$ARCH_FLAGS"
fi

## set the compiler name
# See if there's an alternative preference for the compilers
if [ -z "$CXX" ]; then
	compiler_name="g++ "
else
	compiler_name="$CXX "
fi
if [ -z "$CC" ]; then
	c_compiler_name="gcc "
else
	c_compiler_name="$CC "
fi

## Process any arguments that were supplied

## By default, we enable clang support
disable_clang="no"

until [ -z "$1" ]  # Until all parameters used up
do
	if [ "$1" = "--without-clang" ]; then
		disable_clang="yes";
		
	elif [ "$1" = "--enable-debug" ]; then
		enable_debug="yes"

	elif [ "$1" = "--enable-mysql" ]; then
		enable_mysql="yes"
    
    elif [ "$1" = "--enable-pch" ]; then
        enable_pch="yes"
        
	elif [ "$1" = "--enable-postgres" ]; then
		enable_postgres="yes"

	   # The next 3 aren't in the Usage, but will prevent undesirable things from happening when e.g. making rpms
		elif [ "$1" = "--disable-desktop_icon" ]; then
			add_desktop_icon="no"

		elif [ "$1" = "--disable-make_symlink" ]; then
			make_symlink="no"

		elif [ "$1" = "--disable-translations" ]; then
			install_translations="no"

		elif [ "$1" = "--help" ]; then
			Show_Help_and_Exit

		else
			key=`echo $1 | cut -d= -f1`
			value=`echo $1 | cut -d= -f2`

			if [ "$key" = "--prefix" ]; then
				prefix="$value"
				# Make plugins_dir a subdir of this by default, though it may be altered below
				plugins_dir="$value""/lib/codelite"

			elif [ "$key" = "--plugins-dir" ]; then
				plugins_dir="$value"
			fi
		fi
	shift
done

## To where shall we install the .so libs which used to be static e.g. libwxscintillau.so
# I'm using plugins_dir for simplicity, but creating its own name makes this easy to change
non_plugins_dir=$plugins_dir

## remove old makefile
makefile_name="Makefile"
base_dir="."
rm -fr ./Makefile

## Create revision file
createRevisionFile
echo "Generating Makefile..."
createVariables "no"

createPCH

## Create the various object lists
createObjectList "sdk/wxscintilla/src/scintilla/src/*.cxx sdk/wxscintilla/src/*.cpp sdk/wxscintilla/src/scintilla/lexers/*.cxx sdk/wxscintilla/src/scintilla/lexlib/*.cxx" "ScintillaObjects"
createObjectList "sdk/codelite_indexer/network/*.cpp CodeLite/*.cpp" "CodeLiteObjects"
createObjectList "LiteEditor/*.cpp" "LiteEditorObjects"
createObjectList "sdk/wxsqlite3/src/*.cpp sqlite3/*.c" "wxSqlite3Objects"
createObjectList "Plugin/*.cpp Plugin/*.c" "SDKObjects"
createObjectList "sdk/wxshapeframework/src/*.cpp sdk/wxshapeframework/src/wxxmlserializer/*.cpp" "wxShapeFrameworkObjects"
createObjectList "sdk/databaselayer/src/dblayer/Database*.cpp sdk/databaselayer/src/dblayer/Sqlite*.cpp sdk/databaselayer/src/dblayer/PreparedStatement.cpp sdk/databaselayer/src/sqlite3/sqlite3.c" "DatabaseLayerSQLiteObjects"
if [ "$enable_mysql" = "yes" ] ; then
	  createObjectList "sdk/databaselayer/src/dblayer/Database*.cpp sdk/databaselayer/src/dblayer/Mysql*.cpp sdk/databaselayer/src/dblayer/PreparedStatement.cpp" "DatabaseLayerMySQLObjects"
fi
if [ "$enable_postgres" = "yes" ] ; then
	  createObjectList "sdk/databaselayer/src/dblayer/Database*.cpp sdk/databaselayer/src/dblayer/Postgres*.cpp sdk/databaselayer/src/dblayer/PreparedStatement.cpp" "DatabaseLayerPostgresObjects"
fi

createMainTargets
echo >> Makefile

## Create the rules
# First the non-plugin .so libs:
createRules_sharedObject  "Plugin/*.cpp Plugin/*.c" "SDKObjects" "SDK" "libplugin\$(EXT)" "dont_copy" "-L./lib -lwxscintilla\$(EXT) -lcodelite\$(EXT)"
createRules_sharedObject  "sdk/wxscintilla/src/scintilla/src/*.cxx sdk/wxscintilla/src/*.cpp sdk/wxscintilla/src/scintilla/lexers/*.cxx sdk/wxscintilla/src/scintilla/lexlib/*.cxx" "ScintillaObjects" "Scintilla" "libwxscintilla\$(EXT)" "dont_copy"
createRules_sharedObject  "sdk/codelite_indexer/network/*.cpp CodeLite/*.cpp" "CodeLiteObjects" "CodeLite" "libcodelite\$(EXT)" "dont_copy" "-L./lib -lwxsqlite3\$(EXT)"
createRules_sharedObject  "sdk/wxsqlite3/src/*.cpp sqlite3/*.c" "wxSqlite3Objects" "SQLite" "libwxsqlite3\$(EXT)" "dont_copy" ""
createRules_sharedObject  "sdk/wxshapeframework/src/*.cpp sdk/wxshapeframework/src/wxxmlserializer/*.cpp" "wxShapeFrameworkObjects" "ShapeFramework" "libwxshapeframework\$(EXT)" "dont_copy"
createRules_sharedObject  "sdk/databaselayer/src/dblayer/Database*.cpp sdk/databaselayer/src/dblayer/Sqlite*.cpp sdk/databaselayer/src/dblayer/PreparedStatement.cpp sdk/databaselayer/src/sqlite3/*.c" "DatabaseLayerSQLiteObjects" "DatabaseLayerSQLite" "libdblayersqlite\$(EXT)" "dont_copy"
if [ "$enable_mysql" = "yes" ] ; then
	createRules_sharedObject  "sdk/databaselayer/src/dblayer/Database*.cpp sdk/databaselayer/src/dblayer/Mysql*.cpp sdk/databaselayer/src/dblayer/PreparedStatement.cpp" "DatabaseLayerMySQLObjects" "DatabaseLayerMySQL" "libdblayermysql\$(EXT)" "dont_copy"
fi
if [ "$enable_postgres" = "yes" ] ; then
	createRules_sharedObject  "sdk/databaselayer/src/dblayer/Database*.cpp sdk/databaselayer/src/dblayer/Postgres*.cpp sdk/databaselayer/src/dblayer/PreparedStatement.cpp" "DatabaseLayerPostgresObjects" "DatabaseLayerPostgres" "libdblayerpostgres\$(EXT)" "dont_copy"
fi

# Then the binary, and indexer
createRules_exe "LiteEditor/*.cpp" "LiteEditorObjects" "LiteEditor" ${exe_name}
createCodeLiteIndexerMakefile "sdk/codelite_indexer/*.cpp sdk/codelite_indexer/network/*.cpp sdk/codelite_indexer/libctags/*.c sdk/codelite_indexer/libctags/*.cpp"

if [ "$with_clang" = "yes" ]; then 
	createCodeLiteClangMakefile  "codelite_clang/*.cpp"
fi

createCodeLiteCppcheckMakefile "sdk/codelite_cppcheck/cli/*.cpp sdk/codelite_cppcheck/lib/*.cpp"
createInstallTarget
createUnInstallTarget

echo "-include \$(OBJ_DIR)/*.d" >> Makefile
echo "" >> Makefile

echo "Plugins: SDK \\" >> Makefile

########################################################
##
## Add any plugin targets you need here
## Append these as dependencies for the main project
##
########################################################
#echo "CodeDesigner\\" >> Makefile
echo "Debugger\\" >> Makefile
echo "Gizmos\\" >> Makefile
echo "cscope\\" >> Makefile
echo "Subversion2\\" >> Makefile
echo "CodeFormatter\\" >> Makefile
echo "Copyright\\" >> Makefile
echo "UnitTestCPP\\" >> Makefile
echo "ExternalTools\\" >> Makefile
echo "SnipWiz\\" >> Makefile
echo "wxformbuilder\\" >> Makefile
echo "abbreviation\\" >> Makefile
echo "SymbolView\\" >> Makefile
echo "ContinuousBuild\\" >> Makefile
echo "QmakePlugin\\" >> Makefile
echo "git\\" >> Makefile
echo "CppCheck\\" >> Makefile
echo "DatabaseExplorer\\" >> Makefile
## Mac Only
if [ "$os_name" = "Darwin" ]; then
	echo "MacBundler\\" >> Makefile
fi
echo "" >> Makefile

echo "plugins_install:\\" >> Makefile
########################################################
##
## For all plugins you add, you can add an entry here for
## the install target
########################################################
#echo "CodeDesigner_install\\" >> Makefile
echo "Debugger_install\\" >> Makefile
echo "Gizmos_install\\" >> Makefile
echo "cscope_install\\" >> Makefile
echo "Subversion2_install\\" >> Makefile
echo "CodeFormatter_install\\" >> Makefile
echo "Copyright_install\\" >> Makefile
echo "UnitTestCPP_install\\" >> Makefile
echo "ExternalTools_install\\" >> Makefile
echo "SnipWiz_install\\" >> Makefile
echo "wxformbuilder_install\\" >> Makefile
echo "abbreviation_install\\" >> Makefile
echo "SymbolView_install\\" >> Makefile
echo "ContinuousBuild_install\\" >> Makefile
echo "QmakePlugin_install\\" >> Makefile
echo "git_install\\" >> Makefile
echo "DatabaseExplorer_install\\" >> Makefile
## Mac only
if [ "$os_name" = "Darwin" ]; then
	echo "CppCheck_install\\" >> Makefile
	echo "MacBundler_install" >> Makefile
else
	echo "CppCheck_install" >> Makefile
fi
echo "	@chmod 0644 \"\$(DESTDIR)${plugins_dir}\"/*.so" >> Makefile
echo "" >> Makefile

echo "clean_plugins:\\" >> Makefile
########################################################
##
## For all plugins you add, add an entry here for 'clean'
##
########################################################
#echo "CodeDesigner_clean\\" >> Makefile
echo "Debugger_clean\\" >> Makefile
echo "Gizmos_clean\\" >> Makefile
echo "cscope_clean\\" >> Makefile
echo "Subversion2_clean\\" >> Makefile
echo "CodeFormatter_clean\\" >> Makefile
echo "Copyright_clean\\" >> Makefile
echo "UnitTestCPP_clean\\" >> Makefile
echo "ExternalTools_clean\\" >> Makefile
echo "SnipWiz_clean\\" >> Makefile
echo "wxformbuilder_clean\\" >> Makefile
echo "abbreviation_clean\\" >> Makefile
echo "SymbolView_clean\\" >> Makefile
echo "ContinuousBuild_clean\\" >> Makefile
echo "QmakePlugin_clean\\" >> Makefile
echo "git_clean\\" >> Makefile
echo "DatabaseExplorer_clean\\" >> Makefile
if [ "$os_name" = "Darwin" ]; then
	echo "MacBundler_clean\\" >> Makefile
fi
echo "CppCheck_clean" >> Makefile
echo "" >> Makefile

########################################################
##
## add plugins here
## createPluginMakefile <plugin path> <plugin name>
##
########################################################
#createPluginMakefile "CodeDesigner" "CodeDesigner"  "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "Debugger" "Debugger" "\$(DESTDIR)${plugins_dir}/debuggers/" "../Runtime/debuggers"
createPluginMakefile "Gizmos" "Gizmos"  "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "cscope" "cscope" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "Subversion2" "Subversion2" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "CodeFormatter" "CodeFormatter" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "Copyright" "Copyright" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "UnitTestCPP" "UnitTestCPP" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "ExternalTools" "ExternalTools" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "SnipWiz" "SnipWiz" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "wxformbuilder" "wxformbuilder" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "abbreviation" "abbreviation" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "SymbolView" "SymbolView" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "ContinuousBuild" "ContinuousBuild" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "QmakePlugin" "QmakePlugin" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "git" "git" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "cppchecker" "CppCheck" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
createPluginMakefile "DatabaseExplorer" "DatabaseExplorer"  "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
## Mac only plugin: MacBundler
if [ "$os_name" = "Darwin" ]; then
	createPluginMakefile "MacBundler" "MacBundler" "\$(DESTDIR)${plugins_dir}/" "../Runtime/plugins"
fi
