
#line 3 "PhpLexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE phprestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE phplex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via phprestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void phprestart (FILE *input_file ,yyscan_t yyscanner );
void php_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE php_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void php_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void php_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void phppush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void phppop_buffer_state (yyscan_t yyscanner );

static void phpensure_buffer_stack (yyscan_t yyscanner );
static void php_load_buffer_state (yyscan_t yyscanner );
static void php_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER php_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE php_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE php_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE php_scan_bytes (yyconst char *bytes,int len ,yyscan_t yyscanner );

void *phpalloc (yy_size_t ,yyscan_t yyscanner );
void *phprealloc (void *,yy_size_t ,yyscan_t yyscanner );
void phpfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer php_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        phpensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            php_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        phpensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            php_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 149
#define YY_END_OF_BUFFER 150
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[633] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  150,    6,    5,    6,  140,    7,
        8,    9,  140,  139,   19,  140,  140,  140,  138,  140,
      140,  140,  140,  140,  140,   23,   22,  140,  140,  140,
      140,  140,  135,  135,  135,  135,   66,  140,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  140,   21,   20,
       18,   17,   18,   14,   13,   12,  146,  145,  147,  148,
      142,  141,  143,  144,    4,    0,    7,    8,    0,    9,
       98,   10,  106,  137,  113,  109,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  103,   93,  101,   94,
      102,   64,   25,  105,   15,   19,  104,   25,   23,    0,
        0,   23,   23,    0,   22,   22,   22,   65,    0,  117,
       99,   98,   97,   89,  100,  118,  136,  135,  135,  114,
      135,  111,  135,  135,  135,   49,    0,  135,  135,  135,
      135,  135,  135,   41,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,   35,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  110,  112,   16,   12,  146,  146,
        0,  142,  142,    0,    2,    0,    0,   96,   10,  137,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,   25,   23,   24,   22,    0,    0,
      107,   95,  108,  136,  115,  116,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,    0,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   28,  135,  135,  135,
      135,  135,  135,  135,  135,   42,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   67,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   32,  135,   76,   69,
      135,  135,  146,  146,  142,  142,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   25,

       24,   24,    0,    0,    0,    0,    0,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
       52,  135,  135,  135,  135,  135,  135,  135,  135,   57,
       38,  135,  135,  135,  135,  135,  135,   70,   27,  135,
      135,  135,  135,  135,   56,  135,  135,  135,  135,  135,
       90,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,    3,    0,    0,    0,    0,
        0,    0,    0,  128,    0,    0,    0,    0,    0,   24,
        0,    0,    0,   11,    0,    0,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,   91,   54,  135,   33,

       59,   68,   30,  135,  135,  135,  135,  135,   80,  135,
      135,   37,  135,  135,  135,   84,  135,  135,  135,  135,
      135,  135,  135,  135,   79,  135,   58,  135,  135,  135,
      135,  135,  135,  135,   34,   61,   88,   39,  127,    0,
        0,    0,    0,  133,    0,    0,    0,    0,    0,  129,
        0,    0,    0,    0,    0,    0,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  135,  135,  135,  135,
       26,   36,  135,   43,  135,  135,  135,  135,  135,   78,
      135,  135,  135,  135,  135,  135,  135,  135,   87,  135,
       31,   81,   50,    0,    0,  131,    0,    0,    0,    0,

        0,  134,    0,  135,  125,  135,  135,  135,  135,  135,
      135,  135,  135,  135,  135,   46,   53,  135,  135,  135,
      135,   62,   44,  135,  135,   71,  135,  135,  135,  135,
       85,  135,   73,    0,    0,  130,    0,    0,    0,  132,
        0,  135,  124,  135,  123,  135,  135,  135,  135,   82,
       92,   55,  135,  135,  135,   40,   29,  135,  135,  135,
      135,  135,  135,  135,  135,    0,    0,  119,  135,  135,
      135,  120,  135,  135,  135,   51,  135,  135,  135,   77,
       60,   75,   86,  135,    0,  135,  122,  135,  135,   47,
       45,   63,  135,   48,  135,    0,  135,  135,  135,  135,

      135,    0,  121,  135,  135,   72,   74,    0,  126,  135,
        0,  135,    0,   83,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        1,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,   10,   11,   12,   13,   14,   15,
       16,   17,   18,    1,   19,   20,   21,   22,   23,   23,
       23,   23,   23,   23,   23,   24,   24,   25,    1,   26,
       27,   28,   29,    1,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   36,   36,   39,   40,   41,   42,   43,
       36,   44,   45,   46,   47,   36,   36,   48,   36,   36,
        1,   49,    1,   50,   51,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   36,    1,   77,    1,    1,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,

       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    2,    3,    1,    1,    3,    2,    1,    4,    1,
        1,    1,    1,    5,    1,    1,    1,    1,    1,    1,
        1,    6,    6,    7,    1,    1,    1,    1,    8,    9,
        9,    9,    9,    9,    9,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,    8,    1,
       10,   11,   11,    9,    9,    9,   11,   10,   10,   10,
       10,   10,   10,   10,   12,   10,   10,   10,   12,   10,
       12,   10,   12,   10,   12,   10,    1
    } ;

static yyconst flex_int16_t yy_base[653] =
    {   0,
        0,    1,   27,    0, 1065, 1064,    2,    3,  104,    0,
      179,  180,  181,  182, 1066, 1069, 1069,  157, 1069,    5,
     1069,   11, 1038, 1069, 1069,    0,  163,  174, 1069,  190,
     1037,  175,  179,  181,  192,  243,  201, 1038,  189,  172,
      184, 1034, 1020,    0, 1016, 1017, 1069, 1031, 1006,  167,
      192,  186,  166,  220,  209,  178,  222,  996,  199,  199,
      999,  223,  211,  169, 1002,  994,  992,  219, 1069, 1069,
     1069, 1069, 1030, 1069, 1069,    0, 1069, 1069, 1069,  266,
     1069, 1069, 1069,  278,  187,  996,  305, 1069,  317,  323,
     1022,    0, 1069,   18, 1069, 1069,  329,  979,  212,  981,

      983,  980,  991,  987,  971,  976, 1069, 1069, 1069, 1069,
     1069, 1069,  310, 1069, 1069, 1069, 1069,  337,  368,  386,
      324,  186,  274,    0,  394,  267,  277, 1069,  970,  276,
     1069, 1069, 1012, 1069, 1069, 1011, 1034,    0, 1003,    0,
      991, 1069,  397,  964,  964,    0, 1006,  975,  287,  286,
      965,  297,  973,    0,  969,  957,  959,  970,  972,  303,
      958,  953,  956,  954,  948,    0,  951,  308,  947,  946,
      951,  940,  238,  960,  297,  960,  951,  941,  304,  939,
      952,  938,  946,  949, 1069, 1069, 1069,    0, 1069,    0,
        0, 1069,  347,    0, 1069,  945,  934, 1069,    0, 1069,

      999,  932,  935,  933,  926,  931,  925,  934,  942,  924,
      922,  403, 1069,  381,  423, 1069,  372, 1069,  937,  446,
     1069, 1069, 1069, 1069,    0,    0,  951,  951,  317,  950,
      953,  956,  941,  932,  912,  930,  955,  928,  916,  922,
      923,  906,  910,  326,  911,  323,    0,  907,  916,  900,
      394,  907,  898,  912,  915,  910,  911,  911,  897,  899,
      898,  889,  903,  902,  886,  900,    0,  312,  884,  891,
      881,  880,  880,  879,  883,  888,    0,  891,    0,    0,
      883,  882,  390,    0,  447,    0,  877,  883,  890,  889,
      877,  886,  886,  465,  881,  873,  875,  878,  451,  454,

      387,  400,  864,  481,    0,    0,  476,  902,  887,  891,
      888,  887,  881,  886,  895,  861,  854,  846,  859,  868,
        0,  860,  848,  861,  845,  855,  862,  841,  847,    0,
      851,  834,  853,  842,  850,  832,  846,    0,    0,  839,
      840,  850,  830,  848,    0,  843,  826,  409,  828,  825,
        0,  825,  823,  841,  836,  831,  830,  820,  828,  833,
      812,  814,  813,  827,  827, 1069,  814,  804,  810,  485,
      815,  806,  489, 1069,  818,  821,  492,  809,  802, 1069,
      812,  862,  856, 1069,  866,  494,  823,  816,  832,  833,
      830,  826,  828,  823,  789,  807,    0,    0,  805,    0,

        0,    0,    0,  792,  787,  792,  798,  796,    0,  798,
      782,    0,  790,  789,  793,    0,  793,  786,  782,  780,
      788,  777,  789,  783,    0,  772,    0,  767,  783,  782,
      766,  769,  779,  773,    0,    0,    0,    0,    0,  760,
      496,  754,  500, 1069,  777,  772,  771,  755,  502, 1069,
      767,  508,  757,  516,  814,  808,  776,  769,  768,  772,
      766,  774,  770,  768,  762,  758,  748,  738,  753,  737,
        0,    0,  744,  750,  734,  741,  733,  743,  735,    0,
      744,  743,  744,  738,  733,  730,  720,  702,    0,  716,
        0,    0,    0,  518,  521, 1069,  524,  693,  688,  527,

      528, 1069,  685,  702,    0,  699,  710,  693,  709,  695,
      685,  675,  653,  667,  665,    0,    0,  663,  662,  658,
      648,    0,    0,  632,  563,  576,  570,  559,  570,  569,
        0,  566,  570,  525,  531, 1069,  543,  544,  546, 1069,
      547,  569,    0,  577,    0,  567,  587,  565,  549,    0,
        0,    0,  545,  559,  553,    0,    0,  540,  544,  543,
      551,  551,  550,  550,  538,  551,  550,    0,  561,  550,
      567,    0,  534,  541,  537,    0,  525,  528,  535,    0,
        0,    0,    0,  526,  525,  538,    0,  553,  519,    0,
        0,    0,  531,    0,  530,  524,  529,  516,  506,  499,

      486,  467,    0,  485,  451,    0,    0,  461,    0,  450,
      427,  415,  415,    0,  554,  556,  562,  563,  385,  356,
      328,  276,  258,  238,  209,  186,  566,  185,   11,  572,
     1069, 1069,  630,  642,  654,  666,  678,  682,  689,  696,
      705,  714,  721,  728,  734,  740,  750,  754,  758,  768,
      777,  785
    } ;

static yyconst flex_int16_t yy_def[653] =
    {   0,
      633,  633,  632,    3,  634,  634,  635,  635,  632,    9,
      636,  636,  637,  637,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  638,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  639,  639,  639,  639,  632,  632,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  632,  632,  632,
      632,  632,  632,  632,  632,  640,  632,  632,  632,  641,
      632,  632,  632,  642,  632,  632,  632,  632,  632,  632,
      632,  643,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  644,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  639,  639,  639,
      639,  632,  639,  639,  639,  639,  632,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  632,  632,  632,  640,  632,  632,
      645,  632,  632,  646,  632,  632,  632,  632,  643,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  644,  632,  632,  647,
      632,  632,  632,  632,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  632,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  632,  645,  632,  646,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  647,  648,  649,  650,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  651,  652,  632,  632,  650,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,

      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  651,  652,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  632,  632,  632,  632,  632,  632,  632,
      632,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  632,  632,  639,  639,  639,
      639,  639,  639,  639,  639,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  632,  639,  639,  639,  639,  639,
      639,  639,  639,  639,  639,  632,  639,  639,  639,  639,

      639,  632,  639,  639,  639,  639,  639,  632,  639,  639,
      632,  639,  632,  639,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,    0,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632
    } ;

static yyconst flex_int16_t yy_nxt[1147] =
    {   0,
      632,  632,   17,   17,   72,   72,   87,   88,   89,   89,
       89,   87,   89,   88,   90,   90,   90,   89,   73,   73,
      200,  283,  283,  201,  627,   18,   18,   19,   20,   21,
       22,   22,   22,   20,   23,   24,   25,   26,   27,   28,
       29,   30,   19,   31,   32,   33,   34,   35,   36,   37,
       37,   38,   39,   40,   41,   42,   43,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   45,   44,
       44,   44,   44,   44,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   44,   57,   44,   44,   58,
       44,   59,   44,   60,   44,   61,   62,   63,   64,   65,

       66,   44,   67,   68,   74,   74,   75,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   74,   74,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       74,   78,   78,   82,   82,   85,   95,   79,   79,   93,
       94,   97,  108,  627,   83,   83,   97,  110,  133,  134,

       96,  109,  113,  113,  113,  111,  112,  114,  115,  129,
      135,  136,  116,  195,  130,  131,  132,  147,  117,  144,
      118,  152,  125,  125,  125,  153,   86,   80,   80,   84,
       84,  154,  216,  180,  121,  145,  146,  149,  181,  126,
      164,   98,   99,  165,  100,  185,  101,  127,  150,  102,
      171,  151,  629,  196,  172,  103,  121,  216,  104,  105,
      148,  106,  118,  126,  119,  119,  120,  173,  161,  178,
      174,  203,  127,  155,  162,  628,  121,  204,  166,  179,
      163,  122,  156,  157,  158,  167,  168,  190,  190,  123,
      124,  169,  159,  176,  160,  186,  177,  268,  121,  193,

      193,  220,  221,  269,  627,  122,   87,   88,   89,   89,
       89,   87,  216,  218,  123,  218,  626,  124,   89,   88,
       89,   89,   89,   89,   89,   88,   90,   90,   90,   89,
       97,  113,  113,  113,  625,   97,  216,  242,  218,  218,
      191,  214,  214,  212,  213,  215,  215,  215,  213,  239,
      245,  243,  194,  246,  310,  276,  240,  241,  113,  113,
      113,  261,  253,  311,  271,  212,  213,  272,  285,  285,
      212,  213,  213,  254,  328,  213,  353,  262,  263,  277,
       98,   99,  329,  100,  354,  101,  624,  118,  102,  119,
      119,  120,  212,  213,  103,  325,  326,  104,  105,  213,

      106,  121,  215,  215,  215,  118,  122,  120,  120,  120,
      301,  189,  189,  118,  123,  125,  125,  125,  302,  121,
      299,  299,  623,  121,  300,  300,  300,  121,  227,  228,
      122,  229,  126,  380,  301,  230,  231,  232,  380,  123,
      127,  121,  233,  302,  215,  215,  215,  304,  333,  121,
      334,  622,  304,  335,  305,  234,  126,  213,  380,  306,
      422,  213,  380,  336,  423,  127,  373,  337,  192,  192,
      615,  373,  300,  300,  300,  300,  300,  300,  384,  213,
      374,  385,  304,  614,  613,  213,  443,  304,  213,  305,
      373,  443,  213,  449,  306,  373,  384,  495,  449,  385,

      444,  443,  495,  449,  374,  612,  443,  450,  449,  501,
      213,  496,  611,  610,  501,  444,  213,  450,  384,  534,
      375,  385,  495,  502,  534,  535,  534,  495,  539,  501,
      535,  534,  535,  539,  501,  609,  496,  535,  608,  536,
      445,  607,  540,  502,  443,  373,  536,  539,  567,  443,
      373,  567,  539,  567,  606,  616,  567,  616,  444,  374,
      616,  540,  616,  618,  618,  605,  604,  630,  618,  618,
      619,  619,  630,  630,  137,  620,  620,  137,  630,  603,
      617,  602,  617,  601,  600,  599,  598,  566,  597,  596,
      595,  594,  593,  631,  592,  591,  590,  589,  588,  631,

      587,  586,  585,  584,  583,  582,  581,  580,  579,  578,
      577,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      565,  564,  563,  562,  561,  560,  559,  558,  621,  621,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       92,   92,   92,   92,  138,  138,  557,  138,  138,  138,

      138,  188,  188,  556,  188,  188,  188,  188,  189,  189,
      189,  555,  189,  554,  553,  189,  189,  192,  192,  192,
      552,  192,  551,  550,  192,  192,  199,  199,  549,  199,
      199,  199,  199,  217,  217,  548,  217,  547,  217,  284,
      284,  546,  284,  545,  284,  286,  286,  544,  286,  543,
      286,  307,  542,  307,  307,  541,  538,  537,  307,  307,
      307,  307,  382,  382,  382,  382,  383,  383,  383,  383,
      386,  533,  532,  386,  386,  531,  386,  386,  386,  386,
      455,  530,  455,  455,  529,  455,  455,  455,  455,  456,
      456,  456,  528,  456,  456,  456,  456,  527,  526,  525,

      524,  523,  522,  521,  520,  519,  518,  517,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  454,  454,  503,  497,  500,  499,  377,  498,  497,
      494,  493,  492,  491,  490,  489,  488,  487,  486,  485,
      484,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  457,  384,  454,
      454,  453,  452,  451,  448,  447,  377,  446,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  421,  420,  419,

      418,  417,  416,  415,  414,  413,  412,  411,  410,  409,
      408,  407,  406,  405,  404,  403,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  381,  379,  378,  377,  376,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,
      332,  331,  330,  327,  324,  323,  322,  321,  320,  319,
      220,  318,  317,  316,  315,  314,  313,  312,  309,  308,
      303,  298,  297,  296,  295,  294,  293,  292,  291,  290,

      289,  200,  288,  287,  282,  281,  280,  279,  278,  275,
      274,  273,  270,  267,  266,  265,  264,  260,  259,  258,
      257,  256,  255,  252,  251,  250,  249,  248,  247,  244,
      238,  237,  236,  235,  226,  225,  224,  223,  222,  219,
      211,  210,  209,  208,  207,  206,  205,  202,  198,  197,
      187,  184,  183,  182,  175,  170,  143,  142,  141,  140,
      139,  137,  128,  107,   91,  632,   70,   70,   15,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632
    } ;

static yyconst flex_int16_t yy_chk[1147] =
    {   0,
        0,    0,    1,    2,    7,    8,   20,   20,   20,   20,
       20,   20,   22,   22,   22,   22,   22,   22,    7,    8,
       94,  190,  190,   94,  629,    1,    2,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   12,   13,   14,   18,   28,   11,   12,   27,
       27,   30,   32,  628,   13,   14,   30,   33,   40,   40,

       28,   32,   34,   34,   34,   33,   33,   34,   35,   39,
       41,   41,   35,   85,   39,   39,   39,   51,   35,   50,
       37,   53,   37,   37,   37,   53,   18,   11,   12,   13,
       14,   53,  122,   64,   37,   50,   50,   52,   64,   37,
       56,   30,   30,   56,   30,   68,   30,   37,   52,   30,
       59,   52,  626,   85,   59,   30,   37,  122,   30,   30,
       51,   30,   36,   37,   36,   36,   36,   60,   55,   63,
       60,   99,   37,   54,   55,  625,   36,   99,   57,   63,
       55,   36,   54,   54,   54,   57,   57,   80,   80,   36,
       36,   57,   54,   62,   54,   68,   62,  173,   36,   84,

       84,  130,  130,  173,  624,   36,   87,   87,   87,   87,
       87,   87,  123,  126,   36,  127,  623,   36,   89,   89,
       89,   89,   89,   89,   90,   90,   90,   90,   90,   90,
       97,  113,  113,  113,  622,   97,  123,  150,  126,  127,
       80,  121,  121,  113,  113,  121,  121,  121,  113,  149,
      152,  150,   84,  152,  229,  179,  149,  149,  118,  118,
      118,  168,  160,  229,  175,  113,  113,  175,  193,  193,
      118,  118,  113,  160,  246,  118,  268,  168,  168,  179,
       97,   97,  246,   97,  268,   97,  621,  119,   97,  119,
      119,  119,  118,  118,   97,  244,  244,   97,   97,  118,

       97,  119,  214,  214,  214,  120,  119,  120,  120,  120,
      217,  283,  283,  125,  119,  125,  125,  125,  217,  120,
      212,  212,  620,  119,  212,  212,  212,  125,  143,  143,
      119,  143,  125,  301,  217,  143,  143,  143,  302,  119,
      125,  120,  143,  217,  215,  215,  215,  220,  251,  125,
      251,  619,  220,  251,  220,  143,  125,  215,  301,  220,
      348,  215,  302,  251,  348,  125,  294,  251,  285,  285,
      613,  294,  299,  299,  299,  300,  300,  300,  307,  215,
      294,  307,  304,  612,  611,  215,  370,  304,  300,  304,
      373,  370,  300,  377,  304,  373,  386,  441,  377,  386,

      370,  443,  441,  449,  373,  610,  443,  377,  449,  452,
      300,  441,  608,  605,  452,  443,  300,  449,  454,  494,
      294,  454,  495,  452,  494,  497,  534,  495,  500,  501,
      497,  534,  535,  500,  501,  604,  495,  535,  602,  497,
      370,  601,  500,  501,  537,  538,  535,  539,  541,  537,
      538,  567,  539,  541,  600,  615,  567,  616,  537,  538,
      615,  539,  616,  617,  618,  599,  598,  627,  617,  618,
      617,  618,  627,  630,  541,  617,  618,  567,  630,  597,
      615,  596,  616,  595,  593,  589,  588,  534,  586,  585,
      584,  579,  578,  627,  577,  575,  574,  573,  571,  630,

      570,  569,  566,  565,  564,  563,  562,  561,  560,  559,
      558,  555,  554,  553,  549,  548,  547,  546,  544,  542,
      533,  532,  530,  529,  528,  527,  526,  525,  617,  618,
      633,  633,  633,  633,  633,  633,  633,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  634,  634,  634,
      634,  634,  634,  634,  635,  635,  635,  635,  635,  635,
      635,  635,  635,  635,  635,  635,  636,  636,  636,  636,
      636,  636,  636,  636,  636,  636,  636,  636,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      638,  638,  638,  638,  639,  639,  524,  639,  639,  639,

      639,  640,  640,  521,  640,  640,  640,  640,  641,  641,
      641,  520,  641,  519,  518,  641,  641,  642,  642,  642,
      515,  642,  514,  513,  642,  642,  643,  643,  512,  643,
      643,  643,  643,  644,  644,  511,  644,  510,  644,  645,
      645,  509,  645,  508,  645,  646,  646,  507,  646,  506,
      646,  647,  504,  647,  647,  503,  499,  498,  647,  647,
      647,  647,  648,  648,  648,  648,  649,  649,  649,  649,
      650,  490,  488,  650,  650,  487,  650,  650,  650,  650,
      651,  486,  651,  651,  485,  651,  651,  651,  651,  652,
      652,  652,  484,  652,  652,  652,  652,  483,  482,  481,

      479,  478,  477,  476,  475,  474,  473,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      457,  456,  455,  453,  451,  448,  447,  446,  445,  442,
      440,  434,  433,  432,  431,  430,  429,  428,  426,  424,
      423,  422,  421,  420,  419,  418,  417,  415,  414,  413,
      411,  410,  408,  407,  406,  405,  404,  399,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  385,  383,
      382,  381,  379,  378,  376,  375,  372,  371,  369,  368,
      367,  365,  364,  363,  362,  361,  360,  359,  358,  357,
      356,  355,  354,  353,  352,  350,  349,  347,  346,  344,

      343,  342,  341,  340,  337,  336,  335,  334,  333,  332,
      331,  329,  328,  327,  326,  325,  324,  323,  322,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  303,  298,  297,  296,  295,  293,  292,  291,
      290,  289,  288,  287,  282,  281,  278,  276,  275,  274,
      273,  272,  271,  270,  269,  266,  265,  264,  263,  262,
      261,  260,  259,  258,  257,  256,  255,  254,  253,  252,
      250,  249,  248,  245,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  228,  227,
      219,  211,  210,  209,  208,  207,  206,  205,  204,  203,

      202,  201,  197,  196,  184,  183,  182,  181,  180,  178,
      177,  176,  174,  172,  171,  170,  169,  167,  165,  164,
      163,  162,  161,  159,  158,  157,  156,  155,  153,  151,
      148,  147,  145,  144,  141,  139,  137,  136,  133,  129,
      106,  105,  104,  103,  102,  101,  100,   98,   91,   86,
       73,   67,   66,   65,   61,   58,   49,   48,   46,   45,
       43,   42,   38,   31,   23,   15,    6,    5,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,

      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
      632,  632,  632,  632,  632,  632
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[150] =
    {   0,
0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 
    1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
    0, 1, 0, 0, 0, 1, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
//
//====================--------------------------------------------------------------
// Eran Ifrah 2014 (c)
//====================--------------------------------------------------------------
//
// To generate a source file from this .l file, you will need
// a flex version 2.5.34 and later
// Under Windows, you will need to run the following command 
// from within *MSYS* terminal (or run codelite from an MSYS shell):
// /usr/bin/flex --noline --batch --outfile=CppLexer.cpp cpp_lexer.l
//
//====================--------------------------------------------------------------
//
extern "C" int phpwrap(void*) { return 1; }

#include <wx/string.h>
#include <wx/filename.h>
#include "PhpLexerAPI.h"
#include "PHPScannerTokens.h"

#define YYSTYPE wxString
#define ECHO

#define YY_NO_UNISTD_H

#define RETURN_WHITESPACE()                                         \
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r; \
    if(userData->IsCollectingWhitespace()) {                        \
        return kPHP_T_WHITESPACE;                                        \
    }
#define RETURN_NEWLINE()                                            \
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r; \
    if(userData->IsCollectingWhitespace()) {                        \
        return kPHP_T_NEWLINE;                                           \
    }

#define LEX_RETURN(x) {\
    return x;\
}

/* regex and modes */
/* options */

#define INITIAL 0
#define PHP 1
#define CPP_COMMENT 2
#define DOC_COMMENT 3
#define HEREDOC 4
#define DSTRING 5
#define SINGLE_STRING 6

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

int phplex_init (yyscan_t* scanner);

int phplex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int phplex_destroy (yyscan_t yyscanner );

int phpget_debug (yyscan_t yyscanner );

void phpset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE phpget_extra (yyscan_t yyscanner );

void phpset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *phpget_in (yyscan_t yyscanner );

void phpset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *phpget_out (yyscan_t yyscanner );

void phpset_out  (FILE * out_str ,yyscan_t yyscanner );

int phpget_leng (yyscan_t yyscanner );

char *phpget_text (yyscan_t yyscanner );

int phpget_lineno (yyscan_t yyscanner );

void phpset_lineno (int line_number ,yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int phpwrap (yyscan_t yyscanner );
#else
extern int phpwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int phplex (yyscan_t yyscanner);

#define YY_DECL int phplex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			phpensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				php_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		php_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 633 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 632 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{
    BEGIN(PHP);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetInsidePhp(true);
    return kPHP_T_OPEN_TAG;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(PHP);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetInsidePhp(true);
    return kPHP_T_OPEN_TAG_WITH_ECHO;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    BEGIN(PHP);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetInsidePhp(true);
    return kPHP_T_OPEN_TAG;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
    BEGIN(PHP);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetInsidePhp(true);
    return kPHP_T_OPEN_TAG;
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingAllNonPhp()) {
        return yytext[0];
    }
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingAllNonPhp()) {
        return yytext[0];
    }
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{ RETURN_WHITESPACE(); }
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
{ RETURN_NEWLINE();}
	YY_BREAK
case 9:
YY_RULE_SETUP
{RETURN_WHITESPACE();}
	YY_BREAK
case 10:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_VARIABLE);}
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    wxString label = yytext;
    label.Remove(0, 3).Trim(); // remove the "<<<" from the begining of the string
    if(label.StartsWith("'")) label.Remove(0, 1);
    if(label.EndsWith("'")) label.RemoveLast();
    
    userData->SetRawStringLabel(label);
    userData->GetString() << yytext;
    BEGIN(HEREDOC);
    return kPHP_T_START_HEREDOC;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
    // anything else
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString() << yytext;
    if(yytext == userData->GetRawStringLabel()) {
        // end of HEREDOC
        BEGIN(PHP);
        return kPHP_T_END_HEREDOC;
    }
}
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString() << yytext;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
    // anything else
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString() << yytext;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
    // Clear the comment collected
    BEGIN(DOC_COMMENT);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->ClearComment();
        userData->AppendToComment("/*");
        userData->SetCommentStartLine(yylineno);
    }
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment("*/");
        userData->SetCommentEndLine(yylineno);
    }
    BEGIN(PHP);
    if(userData->IsCollectingComments()) {
        return kPHP_T_C_COMMENT;
    }
}
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
{ 
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment("\n");
    }
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment(yytext[0]);
    }
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ 
    BEGIN(CPP_COMMENT); 
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->ClearComment();
        userData->AppendToComment(yytext);
        userData->SetCommentStartLine(yylineno);
    }
}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
{
    BEGIN(PHP);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingWhitespace()) {
        userData->AppendToComment("\n");
    }
    if(userData->IsCollectingComments()) {
        return kPHP_T_CXX_COMMENT;
    }
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{ 
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    if(userData->IsCollectingComments()) {
        userData->AppendToComment(yytext[0]);
    }
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DNUMBER);}
	YY_BREAK
case 23:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_LNUMBER);}
	YY_BREAK
case 24:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_LNUMBER);}
	YY_BREAK
case 25:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DNUMBER);}
	YY_BREAK
case 26:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DEFINE);}
	YY_BREAK
case 27:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_EXIT);}
	YY_BREAK
case 28:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_EXIT);}
	YY_BREAK
case 29:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_FUNCTION);}
	YY_BREAK
case 30:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CONST);}
	YY_BREAK
case 31:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_RETURN);}
	YY_BREAK
case 32:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_TRY);}
	YY_BREAK
case 33:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CATCH);}
	YY_BREAK
case 34:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_THROW);}
	YY_BREAK
case 35:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IF);}
	YY_BREAK
case 36:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ELSEIF);}
	YY_BREAK
case 37:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ENDIF);}
	YY_BREAK
case 38:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ELSE);}
	YY_BREAK
case 39:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_WHILE);}
	YY_BREAK
case 40:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ENDWHILE);}
	YY_BREAK
case 41:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DO);}
	YY_BREAK
case 42:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_FOR);}
	YY_BREAK
case 43:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ENDFOR);}
	YY_BREAK
case 44:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_FOREACH);}
	YY_BREAK
case 45:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ENDFOREACH);}
	YY_BREAK
case 46:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DECLARE);}
	YY_BREAK
case 47:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ENDDECLARE);}
	YY_BREAK
case 48:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_INSTANCEOF);}
	YY_BREAK
case 49:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_AS);}
	YY_BREAK
case 50:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_SWITCH);}
	YY_BREAK
case 51:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ENDSWITCH);}
	YY_BREAK
case 52:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CASE);}
	YY_BREAK
case 53:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DEFAULT);}
	YY_BREAK
case 54:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_BREAK);}
	YY_BREAK
case 55:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CONTINUE);}
	YY_BREAK
case 56:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_GOTO);}
	YY_BREAK
case 57:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ECHO);}
	YY_BREAK
case 58:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_PRINT);}
	YY_BREAK
case 59:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CLASS);}
	YY_BREAK
case 60:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_INTERFACE);}
	YY_BREAK
case 61:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_TRAIT);}
	YY_BREAK
case 62:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_EXTENDS);}
	YY_BREAK
case 63:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IMPLEMENTS);}
	YY_BREAK
case 64:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_OBJECT_OPERATOR);}
	YY_BREAK
case 65:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_PAAMAYIM_NEKUDOTAYIM);}
	YY_BREAK
case 66:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_NS_SEPARATOR);}
	YY_BREAK
case 67:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_NEW);}
	YY_BREAK
case 68:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CLONE);}
	YY_BREAK
case 69:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_VAR);}
	YY_BREAK
case 70:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_EVAL);}
	YY_BREAK
case 71:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_INCLUDE);}
	YY_BREAK
case 72:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_INCLUDE_ONCE);}
	YY_BREAK
case 73:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_REQUIRE);}
	YY_BREAK
case 74:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_REQUIRE_ONCE);}
	YY_BREAK
case 75:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_NAMESPACE);}
	YY_BREAK
case 76:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_USE);}
	YY_BREAK
case 77:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_INSTEADOF);}
	YY_BREAK
case 78:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_GLOBAL);}
	YY_BREAK
case 79:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ISSET);}
	YY_BREAK
case 80:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_EMPTY);}
	YY_BREAK
case 81:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_STATIC);}
	YY_BREAK
case 82:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ABSTRACT);}
	YY_BREAK
case 83:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ABSTRACT);}
	YY_BREAK
case 84:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_FINAL);}
	YY_BREAK
case 85:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_PRIVATE);}
	YY_BREAK
case 86:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_PROTECTED);}
	YY_BREAK
case 87:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_PUBLIC);}
	YY_BREAK
case 88:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_UNSET);}
	YY_BREAK
case 89:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DOUBLE_ARROW);}
	YY_BREAK
case 90:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_LIST);}
	YY_BREAK
case 91:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_ARRAY);}
	YY_BREAK
case 92:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CALLABLE);}
	YY_BREAK
case 93:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_INC);}
	YY_BREAK
case 94:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DEC);}
	YY_BREAK
case 95:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IS_IDENTICAL);}
	YY_BREAK
case 96:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IS_NOT_IDENTICAL);}
	YY_BREAK
case 97:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IS_EQUAL);}
	YY_BREAK
case 98:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IS_NOT_EQUAL);}
	YY_BREAK
case 99:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IS_SMALLER_OR_EQUAL);}
	YY_BREAK
case 100:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IS_GREATER_OR_EQUAL);}
	YY_BREAK
case 101:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_PLUS_EQUAL);}
	YY_BREAK
case 102:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_MINUS_EQUAL);}
	YY_BREAK
case 103:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_MUL_EQUAL);}
	YY_BREAK
case 104:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DIV_EQUAL);}
	YY_BREAK
case 105:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CONCAT_EQUAL);}
	YY_BREAK
case 106:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_MOD_EQUAL);}
	YY_BREAK
case 107:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_SL_EQUAL);}
	YY_BREAK
case 108:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_SR_EQUAL);}
	YY_BREAK
case 109:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_AND_EQUAL);}
	YY_BREAK
case 110:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_OR_EQUAL);}
	YY_BREAK
case 111:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_XOR_EQUAL);}
	YY_BREAK
case 112:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_BOOLEAN_OR);}
	YY_BREAK
case 113:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_BOOLEAN_AND);}
	YY_BREAK
case 114:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_LOGICAL_OR);}
	YY_BREAK
case 115:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_LOGICAL_AND);}
	YY_BREAK
case 116:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_LOGICAL_XOR);}
	YY_BREAK
case 117:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_SL);}
	YY_BREAK
case 118:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_SR);}
	YY_BREAK
case 119:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_CLASS_C);}
	YY_BREAK
case 120:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_TRAIT_C);}
	YY_BREAK
case 121:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_FUNC_C);}
	YY_BREAK
case 122:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_METHOD_C);}
	YY_BREAK
case 123:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_LINE);}
	YY_BREAK
case 124:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_FILE);}
	YY_BREAK
case 125:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_DIR);}
	YY_BREAK
case 126:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_NS_C);}
	YY_BREAK
case 127:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_YIELD);}
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    LEX_RETURN(kPHP_T_INT_CAST);
}
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    LEX_RETURN(kPHP_T_DOUBLE_CAST);
}
	YY_BREAK
case 130:
YY_RULE_SETUP
{
    LEX_RETURN(kPHP_T_STRING_CAST);
}
	YY_BREAK
case 131:
YY_RULE_SETUP
{
    LEX_RETURN(kPHP_T_ARRAY_CAST);
}
	YY_BREAK
case 132:
YY_RULE_SETUP
{
    LEX_RETURN(kPHP_T_OBJECT_CAST);
}
	YY_BREAK
case 133:
YY_RULE_SETUP
{
    return kPHP_T_BOOL_CAST;
}
	YY_BREAK
case 134:
YY_RULE_SETUP
{
    return kPHP_T_UNSET_CAST;
}
	YY_BREAK
case 135:
YY_RULE_SETUP
{LEX_RETURN(kPHP_T_IDENTIFIER);}
	YY_BREAK
case 136:
/* rule 136 can match eol */
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetInsidePhp(false);
    return kPHP_T_CLOSE_TAG;
}
	YY_BREAK
case 137:
/* rule 137 can match eol */
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetInsidePhp(false);
    return kPHP_T_CLOSE_TAG;
}
	YY_BREAK
case 138:
YY_RULE_SETUP
{
    BEGIN(SINGLE_STRING); 
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetString("'");
}
	YY_BREAK
case 139:
YY_RULE_SETUP
{
    BEGIN(DSTRING);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->SetString("\"");
}
	YY_BREAK
case YY_STATE_EOF(PHP):
{ 
    yyterminate(); 
    return 0;
}
	YY_BREAK
case 140:
YY_RULE_SETUP
{
    LEX_RETURN(yytext[0]);
}
	YY_BREAK
case 141:
/* rule 141 can match eol */
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append("\n");
}
	YY_BREAK
case 142:
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append(yytext);
}
	YY_BREAK
case 143:
YY_RULE_SETUP
{
    BEGIN(PHP);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append("'");
    return kPHP_T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 144:
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append(yytext[0]);
}
	YY_BREAK
case 145:
/* rule 145 can match eol */
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append("\n");
}
	YY_BREAK
case 146:
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append(yytext);
}
	YY_BREAK
case 147:
YY_RULE_SETUP
{
    BEGIN(PHP);
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append("\"");
    return kPHP_T_CONSTANT_ENCAPSED_STRING;
}
	YY_BREAK
case 148:
YY_RULE_SETUP
{
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    userData->GetString().Append(yytext[0]);
}
	YY_BREAK
case 149:
YY_RULE_SETUP
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CPP_COMMENT):
case YY_STATE_EOF(DOC_COMMENT):
case YY_STATE_EOF(HEREDOC):
case YY_STATE_EOF(DSTRING):
case YY_STATE_EOF(SINGLE_STRING):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * phplex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( phpwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of phplex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					phprealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			phprestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) phprealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 633 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 633 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 632);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					phprestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( phpwrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void phprestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        phpensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            php_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	php_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	php_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void php_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		phppop_buffer_state();
	 *		phppush_buffer_state(new_buffer);
     */
	phpensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	php_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (phpwrap()) processing, but the only time this flag
	 * is looked at is after phpwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void php_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE php_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) phpalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in php_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) phpalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in php_create_buffer()" );

	b->yy_is_our_buffer = 1;

	php_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with php_create_buffer()
 * @param yyscanner The scanner object.
 */
    void php_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		phpfree((void *) b->yy_ch_buf ,yyscanner );

	phpfree((void *) b ,yyscanner );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a phprestart() or at EOF.
 */
    static void php_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	php_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then php_init_buffer was _probably_
     * called from phprestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void php_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		php_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void phppush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	phpensure_buffer_stack(yyscanner);

	/* This block is copied from php_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from php_switch_to_buffer. */
	php_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void phppop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	php_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		php_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void phpensure_buffer_stack (yyscan_t yyscanner)
{
	int num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)phpalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in phpensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)phprealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in phpensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE php_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) phpalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in php_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	php_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to phplex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       php_scan_bytes() instead.
 */
YY_BUFFER_STATE php_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return php_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to phplex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE php_scan_bytes  (yyconst char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) phpalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in php_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = php_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in php_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE phpget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int phpget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int phpget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *phpget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *phpget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int phpget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *phpget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void phpset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void phpset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "phpset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void phpset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "phpset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see php_switch_to_buffer
 */
void phpset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void phpset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int phpget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void phpset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* phplex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int phplex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) phpalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* phplex_init_extra has the same functionality as phplex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to phpalloc in
 * the yyextra field.
 */

int phplex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    phpset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) phpalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    phpset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from phplex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * phplex_init()
     */
    return 0;
}

/* phplex_destroy is for both reentrant and non-reentrant scanners. */
int phplex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		php_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		phppop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	phpfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        phpfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * phplex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    phpfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *phpalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *phprealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void phpfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see phprealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

//=============-------------------------------
// API methods implementation
//=============-------------------------------

bool phpLexerIsPHPCode(void* scanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)scanner;
    phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
    return userData->IsInsidePhp();
}

void* phpLexerNew(const wxString& filename, size_t options )
{
    wxFileName fn = filename;
    if(fn.IsRelative()) {
        fn.MakeAbsolute();
    }
    
    FILE* fp = ::fopen(fn.GetFullPath().mb_str(wxConvUTF8).data(), "rb");
    if(!fp) {
        return NULL;
    }
    yyscan_t scanner;
    phplex_init(&scanner);
    struct yyguts_t * yyg = (struct yyguts_t*)scanner;
    yyg->yyextra_r = new phpLexerUserData(options);
    php_switch_to_buffer(php_create_buffer(fp, YY_BUF_SIZE, scanner), scanner);
    return scanner;
}

void phpLexerDestroy(void** scanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)(*scanner);
    delete (phpLexerUserData*)yyg->yyextra_r;
    php_delete_buffer(YY_CURRENT_BUFFER, *scanner);

    phplex_destroy(*scanner);
    *scanner = NULL;
}

bool phpLexerNext(void* scanner, phpLexerToken& token)
{
    token.endLineNumber = -1;
    token.type = phplex(scanner);
    if(token.type != 0) {
        struct yyguts_t * yyg = (struct yyguts_t*)scanner;
        phpLexerUserData* userData = (phpLexerUserData*)yyg->yyextra_r;
        switch(token.type) {
        case kPHP_T_END_HEREDOC:
            token.lineNumber = phpget_lineno(scanner); 
            token.text = userData->GetString();
            userData->GetString().Clear();
            break;
        case kPHP_T_START_HEREDOC:
            token.lineNumber = phpget_lineno(scanner);
            token.text.Clear();
            break;
        case kPHP_T_CONSTANT_ENCAPSED_STRING:
            token.lineNumber = phpget_lineno(scanner);
            token.text = userData->GetString();
            userData->GetString().Clear();
            break;
        case kPHP_T_CXX_COMMENT:
            // One line up for CXX comments
            token.lineNumber = userData->GetCommentStartLine();
            token.text = userData->GetComment();
            userData->ClearComment();
            break;
        case kPHP_T_C_COMMENT:
            token.text = userData->GetComment();
            token.lineNumber = userData->GetCommentStartLine();
            token.endLineNumber = userData->GetCommentEndLine();
            userData->ClearComment();
            break;
        default:
            token.lineNumber = phpget_lineno(scanner);
            token.text = phpget_text(scanner);
            break;
        }

    } else {
        token.text.Clear();
        token.lineNumber = 0;
    }
    return token.type != 0;
}

